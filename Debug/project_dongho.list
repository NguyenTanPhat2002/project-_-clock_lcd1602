
project_dongho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c14  08003c14  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003c14  08003c14  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c14  08003c14  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000060  08003c7c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003c7c  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000076fd  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000194d  00000000  00000000  000277c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00029118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000643  00000000  00000000  00029958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017496  00000000  00000000  00029f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000abc4  00000000  00000000  00041431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008287d  00000000  00000000  0004bff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002624  00000000  00000000  000ce874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d0e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b40 	.word	0x08003b40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003b40 	.word	0x08003b40

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <clock_time_update>:
		{"FRI"},
		{"SAT"},

};
void clock_time_update()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af02      	add	r7, sp, #8
		static uint32_t t_update =0;
		  if(HAL_GetTick() - t_update >= 500)
 8000162:	f000 fdfb 	bl	8000d5c <HAL_GetTick>
 8000166:	4602      	mov	r2, r0
 8000168:	4b24      	ldr	r3, [pc, #144]	; (80001fc <clock_time_update+0xa0>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	1ad3      	subs	r3, r2, r3
 800016e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000172:	d33e      	bcc.n	80001f2 <clock_time_update+0x96>
		  {
		  RTC_ReadTime(&hrtc,&hrtc.datetime);
 8000174:	4922      	ldr	r1, [pc, #136]	; (8000200 <clock_time_update+0xa4>)
 8000176:	4823      	ldr	r0, [pc, #140]	; (8000204 <clock_time_update+0xa8>)
 8000178:	f002 feb8 	bl	8002eec <RTC_ReadTime>
		  uint8_t day_of_week = RTC_READ_DAY_OF_WEEK(&hrtc.datetime );
 800017c:	4820      	ldr	r0, [pc, #128]	; (8000200 <clock_time_update+0xa4>)
 800017e:	f002 ff0d 	bl	8002f9c <RTC_READ_DAY_OF_WEEK>
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
		  lcd_set_cursor(&lcd,0,3);
 8000186:	2203      	movs	r2, #3
 8000188:	2100      	movs	r1, #0
 800018a:	481f      	ldr	r0, [pc, #124]	; (8000208 <clock_time_update+0xac>)
 800018c:	f002 fd68 	bl	8002c60 <lcd_set_cursor>
		  lcd_printf(&lcd, "%02d:%02d:%02d",hrtc.datetime.hour,hrtc.datetime.min,hrtc.datetime.sec);
 8000190:	4b1c      	ldr	r3, [pc, #112]	; (8000204 <clock_time_update+0xa8>)
 8000192:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000196:	461a      	mov	r2, r3
 8000198:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <clock_time_update+0xa8>)
 800019a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800019e:	4619      	mov	r1, r3
 80001a0:	4b18      	ldr	r3, [pc, #96]	; (8000204 <clock_time_update+0xa8>)
 80001a2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80001a6:	9300      	str	r3, [sp, #0]
 80001a8:	460b      	mov	r3, r1
 80001aa:	4918      	ldr	r1, [pc, #96]	; (800020c <clock_time_update+0xb0>)
 80001ac:	4816      	ldr	r0, [pc, #88]	; (8000208 <clock_time_update+0xac>)
 80001ae:	f002 fd91 	bl	8002cd4 <lcd_printf>
		  lcd_set_cursor(&lcd, 1, 0);
 80001b2:	2200      	movs	r2, #0
 80001b4:	2101      	movs	r1, #1
 80001b6:	4814      	ldr	r0, [pc, #80]	; (8000208 <clock_time_update+0xac>)
 80001b8:	f002 fd52 	bl	8002c60 <lcd_set_cursor>
		  lcd_printf(&lcd, "%s %02d/%02d/20%02d",arr_day[day_of_week],hrtc.datetime.date,hrtc.datetime.month,hrtc.datetime.year);
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	4a13      	ldr	r2, [pc, #76]	; (8000210 <clock_time_update+0xb4>)
 80001c2:	441a      	add	r2, r3
 80001c4:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <clock_time_update+0xa8>)
 80001c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80001ca:	4618      	mov	r0, r3
 80001cc:	4b0d      	ldr	r3, [pc, #52]	; (8000204 <clock_time_update+0xa8>)
 80001ce:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80001d2:	4619      	mov	r1, r3
 80001d4:	4b0b      	ldr	r3, [pc, #44]	; (8000204 <clock_time_update+0xa8>)
 80001d6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80001da:	9301      	str	r3, [sp, #4]
 80001dc:	9100      	str	r1, [sp, #0]
 80001de:	4603      	mov	r3, r0
 80001e0:	490c      	ldr	r1, [pc, #48]	; (8000214 <clock_time_update+0xb8>)
 80001e2:	4809      	ldr	r0, [pc, #36]	; (8000208 <clock_time_update+0xac>)
 80001e4:	f002 fd76 	bl	8002cd4 <lcd_printf>
		  t_update = HAL_GetTick();
 80001e8:	f000 fdb8 	bl	8000d5c <HAL_GetTick>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4a03      	ldr	r2, [pc, #12]	; (80001fc <clock_time_update+0xa0>)
 80001f0:	6013      	str	r3, [r2, #0]
		  }
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000134 	.word	0x20000134
 8000200:	200000e0 	.word	0x200000e0
 8000204:	200000dc 	.word	0x200000dc
 8000208:	200000d0 	.word	0x200000d0
 800020c:	08003b58 	.word	0x08003b58
 8000210:	08003b98 	.word	0x08003b98
 8000214:	08003b68 	.word	0x08003b68

08000218 <up_down_number>:

}ClockState;
ClockState clock_state = NORMAL_STATE;
//----------utils----------------
void up_down_number(int8_t *number, int8_t max,int8_t min, int8_t plus)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4603      	mov	r3, r0
 8000228:	70fb      	strb	r3, [r7, #3]
 800022a:	460b      	mov	r3, r1
 800022c:	70bb      	strb	r3, [r7, #2]
 800022e:	4613      	mov	r3, r2
 8000230:	707b      	strb	r3, [r7, #1]
	if(plus)
 8000232:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d013      	beq.n	8000262 <up_down_number+0x4a>
	{
		(*number)++;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f993 3000 	ldrsb.w	r3, [r3]
 8000240:	b2db      	uxtb	r3, r3
 8000242:	3301      	adds	r3, #1
 8000244:	b2db      	uxtb	r3, r3
 8000246:	b25a      	sxtb	r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	701a      	strb	r2, [r3, #0]
	if( *number > max)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f993 3000 	ldrsb.w	r3, [r3]
 8000252:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000256:	429a      	cmp	r2, r3
 8000258:	da16      	bge.n	8000288 <up_down_number+0x70>
	{
		*number = min;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	78ba      	ldrb	r2, [r7, #2]
 800025e:	701a      	strb	r2, [r3, #0]
	if(*number < min)
	{
		*number = max;
	}
	}
}
 8000260:	e012      	b.n	8000288 <up_down_number+0x70>
		(*number)--;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f993 3000 	ldrsb.w	r3, [r3]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	3b01      	subs	r3, #1
 800026c:	b2db      	uxtb	r3, r3
 800026e:	b25a      	sxtb	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	701a      	strb	r2, [r3, #0]
	if(*number < min)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f993 3000 	ldrsb.w	r3, [r3]
 800027a:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800027e:	429a      	cmp	r2, r3
 8000280:	dd02      	ble.n	8000288 <up_down_number+0x70>
		*number = max;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	78fa      	ldrb	r2, [r7, #3]
 8000286:	701a      	strb	r2, [r3, #0]
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
	...

08000294 <check_leap_year>:

uint8_t check_leap_year(uint16_t year)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	80fb      	strh	r3, [r7, #6]
	if (((year % 4 == 0) && (year % 100!= 0)) || (year%400 == 0))
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	f003 0303 	and.w	r3, r3, #3
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d10b      	bne.n	80002c2 <check_leap_year+0x2e>
 80002aa:	88fb      	ldrh	r3, [r7, #6]
 80002ac:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <check_leap_year+0x58>)
 80002ae:	fba2 1203 	umull	r1, r2, r2, r3
 80002b2:	0952      	lsrs	r2, r2, #5
 80002b4:	2164      	movs	r1, #100	; 0x64
 80002b6:	fb01 f202 	mul.w	r2, r1, r2
 80002ba:	1a9b      	subs	r3, r3, r2
 80002bc:	b29b      	uxth	r3, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d10c      	bne.n	80002dc <check_leap_year+0x48>
 80002c2:	88fb      	ldrh	r3, [r7, #6]
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <check_leap_year+0x58>)
 80002c6:	fba2 1203 	umull	r1, r2, r2, r3
 80002ca:	09d2      	lsrs	r2, r2, #7
 80002cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80002d0:	fb01 f202 	mul.w	r2, r1, r2
 80002d4:	1a9b      	subs	r3, r3, r2
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d101      	bne.n	80002e0 <check_leap_year+0x4c>
	{
		return 1;
 80002dc:	2301      	movs	r3, #1
 80002de:	e000      	b.n	80002e2 <check_leap_year+0x4e>
	}
	    return 0;
 80002e0:	2300      	movs	r3, #0
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	51eb851f 	.word	0x51eb851f

080002f0 <get_max_date>:

uint8_t get_max_date(uint8_t month, uint16_t year)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	460a      	mov	r2, r1
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	4613      	mov	r3, r2
 80002fe:	80bb      	strh	r3, [r7, #4]
	switch(month)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b0c      	cmp	r3, #12
 8000304:	bf8c      	ite	hi
 8000306:	2201      	movhi	r2, #1
 8000308:	2200      	movls	r2, #0
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	d12c      	bne.n	800036a <get_max_date+0x7a>
 8000310:	2201      	movs	r2, #1
 8000312:	fa02 f303 	lsl.w	r3, r2, r3
 8000316:	f241 52aa 	movw	r2, #5546	; 0x15aa
 800031a:	401a      	ands	r2, r3
 800031c:	2a00      	cmp	r2, #0
 800031e:	bf14      	ite	ne
 8000320:	2201      	movne	r2, #1
 8000322:	2200      	moveq	r2, #0
 8000324:	b2d2      	uxtb	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d112      	bne.n	8000350 <get_max_date+0x60>
 800032a:	f403 6225 	and.w	r2, r3, #2640	; 0xa50
 800032e:	2a00      	cmp	r2, #0
 8000330:	bf14      	ite	ne
 8000332:	2201      	movne	r2, #1
 8000334:	2200      	moveq	r2, #0
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	d10b      	bne.n	8000354 <get_max_date+0x64>
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	2b00      	cmp	r3, #0
 8000342:	bf14      	ite	ne
 8000344:	2301      	movne	r3, #1
 8000346:	2300      	moveq	r3, #0
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d104      	bne.n	8000358 <get_max_date+0x68>
 800034e:	e00c      	b.n	800036a <get_max_date+0x7a>
	{
	case 1: case 3 : case 5 : case 7 : case 8 : case 10 : case 12 :
		return 31;
 8000350:	231f      	movs	r3, #31
 8000352:	e00b      	b.n	800036c <get_max_date+0x7c>
	case 4: case 6 : case 9 : case 11 :
		return 30;
 8000354:	231e      	movs	r3, #30
 8000356:	e009      	b.n	800036c <get_max_date+0x7c>
	case 2 :
		if(check_leap_year(year))
 8000358:	88bb      	ldrh	r3, [r7, #4]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff9a 	bl	8000294 <check_leap_year>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <get_max_date+0x7a>
		{
			return 29;
 8000366:	231d      	movs	r3, #29
 8000368:	e000      	b.n	800036c <get_max_date+0x7c>
		}
	}
	return 28;
 800036a:	231c      	movs	r3, #28

}
 800036c:	4618      	mov	r0, r3
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <setting_blink>:


//----------blink----------------
void setting_blink()
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b08d      	sub	sp, #52	; 0x34
 8000378:	af02      	add	r7, sp, #8
	static uint32_t t_blink =0;
	static uint8_t is_show =1;
	char line1[16] ;
	char line2[16] ;
			  if(HAL_GetTick() - t_blink >= 300)
 800037a:	f000 fcef 	bl	8000d5c <HAL_GetTick>
 800037e:	4602      	mov	r2, r0
 8000380:	4b4a      	ldr	r3, [pc, #296]	; (80004ac <setting_blink+0x138>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800038a:	f0c0 808b 	bcc.w	80004a4 <setting_blink+0x130>
				 {
				  is_show = ! is_show;
 800038e:	4b48      	ldr	r3, [pc, #288]	; (80004b0 <setting_blink+0x13c>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	bf0c      	ite	eq
 8000396:	2301      	moveq	r3, #1
 8000398:	2300      	movne	r3, #0
 800039a:	b2db      	uxtb	r3, r3
 800039c:	461a      	mov	r2, r3
 800039e:	4b44      	ldr	r3, [pc, #272]	; (80004b0 <setting_blink+0x13c>)
 80003a0:	701a      	strb	r2, [r3, #0]
					 RTC_ReadTime(&hrtc,&hrtc.datetime);
 80003a2:	4944      	ldr	r1, [pc, #272]	; (80004b4 <setting_blink+0x140>)
 80003a4:	4844      	ldr	r0, [pc, #272]	; (80004b8 <setting_blink+0x144>)
 80003a6:	f002 fda1 	bl	8002eec <RTC_ReadTime>
					 uint8_t day_of_week = RTC_READ_DAY_OF_WEEK(&hrtc.datetime );
 80003aa:	4842      	ldr	r0, [pc, #264]	; (80004b4 <setting_blink+0x140>)
 80003ac:	f002 fdf6 	bl	8002f9c <RTC_READ_DAY_OF_WEEK>
 80003b0:	4603      	mov	r3, r0
 80003b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 sprintf(line1, "%02d:%02d:%02d",hrtc.datetime.hour,hrtc.datetime.min,hrtc.datetime.sec);
 80003b6:	4b40      	ldr	r3, [pc, #256]	; (80004b8 <setting_blink+0x144>)
 80003b8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80003bc:	461a      	mov	r2, r3
 80003be:	4b3e      	ldr	r3, [pc, #248]	; (80004b8 <setting_blink+0x144>)
 80003c0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80003c4:	4619      	mov	r1, r3
 80003c6:	4b3c      	ldr	r3, [pc, #240]	; (80004b8 <setting_blink+0x144>)
 80003c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80003cc:	f107 0014 	add.w	r0, r7, #20
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	460b      	mov	r3, r1
 80003d4:	4939      	ldr	r1, [pc, #228]	; (80004bc <setting_blink+0x148>)
 80003d6:	f002 fee1 	bl	800319c <siprintf>
 sprintf(line2, "%s %02d/%02d/20%02d",arr_day[day_of_week],hrtc.datetime.date,hrtc.datetime.month,hrtc.datetime.year);
 80003da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	4a37      	ldr	r2, [pc, #220]	; (80004c0 <setting_blink+0x14c>)
 80003e2:	441a      	add	r2, r3
 80003e4:	4b34      	ldr	r3, [pc, #208]	; (80004b8 <setting_blink+0x144>)
 80003e6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80003ea:	461c      	mov	r4, r3
 80003ec:	4b32      	ldr	r3, [pc, #200]	; (80004b8 <setting_blink+0x144>)
 80003ee:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80003f2:	4619      	mov	r1, r3
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <setting_blink+0x144>)
 80003f6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80003fa:	1d38      	adds	r0, r7, #4
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	9100      	str	r1, [sp, #0]
 8000400:	4623      	mov	r3, r4
 8000402:	4930      	ldr	r1, [pc, #192]	; (80004c4 <setting_blink+0x150>)
 8000404:	f002 feca 	bl	800319c <siprintf>

					 if(is_show)
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <setting_blink+0x13c>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d02d      	beq.n	800046c <setting_blink+0xf8>
				  {

					switch(clock_state)
 8000410:	4b2d      	ldr	r3, [pc, #180]	; (80004c8 <setting_blink+0x154>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	3b01      	subs	r3, #1
 8000416:	2b05      	cmp	r3, #5
 8000418:	d827      	bhi.n	800046a <setting_blink+0xf6>
 800041a:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <setting_blink+0xac>)
 800041c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000420:	08000439 	.word	0x08000439
 8000424:	08000443 	.word	0x08000443
 8000428:	0800046b 	.word	0x0800046b
 800042c:	0800044d 	.word	0x0800044d
 8000430:	08000457 	.word	0x08000457
 8000434:	08000461 	.word	0x08000461
				 {
					 case SETTING_HOUR_STATE:
						line1[0] = line1[1] = ' ';
 8000438:	2320      	movs	r3, #32
 800043a:	757b      	strb	r3, [r7, #21]
 800043c:	7d7b      	ldrb	r3, [r7, #21]
 800043e:	753b      	strb	r3, [r7, #20]
						 break;
 8000440:	e014      	b.n	800046c <setting_blink+0xf8>
					 case SETTING_MIN_STATE:
						line1[3] = line1[4] = ' ';
 8000442:	2320      	movs	r3, #32
 8000444:	763b      	strb	r3, [r7, #24]
 8000446:	7e3b      	ldrb	r3, [r7, #24]
 8000448:	75fb      	strb	r3, [r7, #23]
						 break;
 800044a:	e00f      	b.n	800046c <setting_blink+0xf8>
					 case SETTING_DATE_STATE:
						line2[4] = line2[5] = ' ';
 800044c:	2320      	movs	r3, #32
 800044e:	727b      	strb	r3, [r7, #9]
 8000450:	7a7b      	ldrb	r3, [r7, #9]
 8000452:	723b      	strb	r3, [r7, #8]
						 break;
 8000454:	e00a      	b.n	800046c <setting_blink+0xf8>
					 case SETTING_MONTH_STATE:
						 line2[7] = line2[8] =' ';
 8000456:	2320      	movs	r3, #32
 8000458:	733b      	strb	r3, [r7, #12]
 800045a:	7b3b      	ldrb	r3, [r7, #12]
 800045c:	72fb      	strb	r3, [r7, #11]
						 break;
 800045e:	e005      	b.n	800046c <setting_blink+0xf8>
					 case SETTING_YEAR_STATE:
						 line2[12]= line2[13] = ' ';
 8000460:	2320      	movs	r3, #32
 8000462:	747b      	strb	r3, [r7, #17]
 8000464:	7c7b      	ldrb	r3, [r7, #17]
 8000466:	743b      	strb	r3, [r7, #16]
						 break;
 8000468:	e000      	b.n	800046c <setting_blink+0xf8>
					 default : break;
 800046a:	bf00      	nop

				 }

				  }
					  lcd_set_cursor(&lcd,0,3);
 800046c:	2203      	movs	r2, #3
 800046e:	2100      	movs	r1, #0
 8000470:	4816      	ldr	r0, [pc, #88]	; (80004cc <setting_blink+0x158>)
 8000472:	f002 fbf5 	bl	8002c60 <lcd_set_cursor>
					  lcd_printf(&lcd, "%s",line1);
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	461a      	mov	r2, r3
 800047c:	4914      	ldr	r1, [pc, #80]	; (80004d0 <setting_blink+0x15c>)
 800047e:	4813      	ldr	r0, [pc, #76]	; (80004cc <setting_blink+0x158>)
 8000480:	f002 fc28 	bl	8002cd4 <lcd_printf>
					  lcd_set_cursor(&lcd, 1, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2101      	movs	r1, #1
 8000488:	4810      	ldr	r0, [pc, #64]	; (80004cc <setting_blink+0x158>)
 800048a:	f002 fbe9 	bl	8002c60 <lcd_set_cursor>
					  lcd_printf(&lcd, "%s ",line2);
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	461a      	mov	r2, r3
 8000492:	4910      	ldr	r1, [pc, #64]	; (80004d4 <setting_blink+0x160>)
 8000494:	480d      	ldr	r0, [pc, #52]	; (80004cc <setting_blink+0x158>)
 8000496:	f002 fc1d 	bl	8002cd4 <lcd_printf>
					 t_blink = HAL_GetTick();
 800049a:	f000 fc5f 	bl	8000d5c <HAL_GetTick>
 800049e:	4603      	mov	r3, r0
 80004a0:	4a02      	ldr	r2, [pc, #8]	; (80004ac <setting_blink+0x138>)
 80004a2:	6013      	str	r3, [r2, #0]
			  }
}
 80004a4:	bf00      	nop
 80004a6:	372c      	adds	r7, #44	; 0x2c
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd90      	pop	{r4, r7, pc}
 80004ac:	20000138 	.word	0x20000138
 80004b0:	20000000 	.word	0x20000000
 80004b4:	200000e0 	.word	0x200000e0
 80004b8:	200000dc 	.word	0x200000dc
 80004bc:	08003b58 	.word	0x08003b58
 80004c0:	08003b98 	.word	0x08003b98
 80004c4:	08003b68 	.word	0x08003b68
 80004c8:	20000132 	.word	0x20000132
 80004cc:	200000d0 	.word	0x200000d0
 80004d0:	08003b7c 	.word	0x08003b7c
 80004d4:	08003b80 	.word	0x08003b80

080004d8 <ajust_time>:

// ----------ajust_time----------
void ajust_time(uint8_t plus)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	switch(clock_state)
 80004e2:	4b49      	ldr	r3, [pc, #292]	; (8000608 <ajust_time+0x130>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	2b07      	cmp	r3, #7
 80004ea:	f200 8087 	bhi.w	80005fc <ajust_time+0x124>
 80004ee:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <ajust_time+0x1c>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	08000515 	.word	0x08000515
 80004f8:	0800052d 	.word	0x0800052d
 80004fc:	080005fd 	.word	0x080005fd
 8000500:	08000545 	.word	0x08000545
 8000504:	0800057b 	.word	0x0800057b
 8000508:	080005c5 	.word	0x080005c5
 800050c:	080005dd 	.word	0x080005dd
 8000510:	080005ed 	.word	0x080005ed
				{
				case SETTING_HOUR_STATE:
				{
					up_down_number(&hrtc.datetime.hour,23,0,plus);
 8000514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000518:	2200      	movs	r2, #0
 800051a:	2117      	movs	r1, #23
 800051c:	483b      	ldr	r0, [pc, #236]	; (800060c <ajust_time+0x134>)
 800051e:	f7ff fe7b 	bl	8000218 <up_down_number>
					RTC_WriteTime(&hrtc, &hrtc.datetime);
 8000522:	493b      	ldr	r1, [pc, #236]	; (8000610 <ajust_time+0x138>)
 8000524:	483b      	ldr	r0, [pc, #236]	; (8000614 <ajust_time+0x13c>)
 8000526:	f002 fc8d 	bl	8002e44 <RTC_WriteTime>
					break;
 800052a:	e068      	b.n	80005fe <ajust_time+0x126>
				}
				case SETTING_MIN_STATE:
				{
					up_down_number(&hrtc.datetime.min,59,0,plus);
 800052c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000530:	2200      	movs	r2, #0
 8000532:	213b      	movs	r1, #59	; 0x3b
 8000534:	4838      	ldr	r0, [pc, #224]	; (8000618 <ajust_time+0x140>)
 8000536:	f7ff fe6f 	bl	8000218 <up_down_number>
					RTC_WriteTime(&hrtc, &hrtc.datetime);
 800053a:	4935      	ldr	r1, [pc, #212]	; (8000610 <ajust_time+0x138>)
 800053c:	4835      	ldr	r0, [pc, #212]	; (8000614 <ajust_time+0x13c>)
 800053e:	f002 fc81 	bl	8002e44 <RTC_WriteTime>
					break;
 8000542:	e05c      	b.n	80005fe <ajust_time+0x126>
				}
				case SETTING_DATE_STATE:
				{
					uint8_t max_date = get_max_date(hrtc.datetime.month, hrtc.datetime.year);
 8000544:	4b33      	ldr	r3, [pc, #204]	; (8000614 <ajust_time+0x13c>)
 8000546:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4a31      	ldr	r2, [pc, #196]	; (8000614 <ajust_time+0x13c>)
 800054e:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8000552:	b292      	uxth	r2, r2
 8000554:	4611      	mov	r1, r2
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff feca 	bl	80002f0 <get_max_date>
 800055c:	4603      	mov	r3, r0
 800055e:	73bb      	strb	r3, [r7, #14]
					up_down_number(&hrtc.datetime.date,max_date,1,plus);
 8000560:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000568:	2201      	movs	r2, #1
 800056a:	482c      	ldr	r0, [pc, #176]	; (800061c <ajust_time+0x144>)
 800056c:	f7ff fe54 	bl	8000218 <up_down_number>
					RTC_WriteTime(&hrtc, &hrtc.datetime);
 8000570:	4927      	ldr	r1, [pc, #156]	; (8000610 <ajust_time+0x138>)
 8000572:	4828      	ldr	r0, [pc, #160]	; (8000614 <ajust_time+0x13c>)
 8000574:	f002 fc66 	bl	8002e44 <RTC_WriteTime>
					break;
 8000578:	e041      	b.n	80005fe <ajust_time+0x126>
				}
				case SETTING_MONTH_STATE:
				{
					up_down_number(&hrtc.datetime.month,12,1,plus);
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	2201      	movs	r2, #1
 8000580:	210c      	movs	r1, #12
 8000582:	4827      	ldr	r0, [pc, #156]	; (8000620 <ajust_time+0x148>)
 8000584:	f7ff fe48 	bl	8000218 <up_down_number>
					uint8_t max_date = get_max_date(hrtc.datetime.month, hrtc.datetime.year);
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <ajust_time+0x13c>)
 800058a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4a20      	ldr	r2, [pc, #128]	; (8000614 <ajust_time+0x13c>)
 8000592:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8000596:	b292      	uxth	r2, r2
 8000598:	4611      	mov	r1, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fea8 	bl	80002f0 <get_max_date>
 80005a0:	4603      	mov	r3, r0
 80005a2:	73fb      	strb	r3, [r7, #15]
					if(hrtc.datetime.date > max_date)
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <ajust_time+0x13c>)
 80005a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80005aa:	461a      	mov	r2, r3
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	dd03      	ble.n	80005ba <ajust_time+0xe2>
					{
						hrtc.datetime.date = max_date;
 80005b2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <ajust_time+0x13c>)
 80005b8:	721a      	strb	r2, [r3, #8]
					}
					RTC_WriteTime(&hrtc, &hrtc.datetime);
 80005ba:	4915      	ldr	r1, [pc, #84]	; (8000610 <ajust_time+0x138>)
 80005bc:	4815      	ldr	r0, [pc, #84]	; (8000614 <ajust_time+0x13c>)
 80005be:	f002 fc41 	bl	8002e44 <RTC_WriteTime>
					break;
 80005c2:	e01c      	b.n	80005fe <ajust_time+0x126>
				}
				case SETTING_YEAR_STATE:
				{
					up_down_number(&hrtc.datetime.year,99,0,plus);
 80005c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c8:	2200      	movs	r2, #0
 80005ca:	2163      	movs	r1, #99	; 0x63
 80005cc:	4815      	ldr	r0, [pc, #84]	; (8000624 <ajust_time+0x14c>)
 80005ce:	f7ff fe23 	bl	8000218 <up_down_number>
					RTC_WriteTime(&hrtc, &hrtc.datetime);
 80005d2:	490f      	ldr	r1, [pc, #60]	; (8000610 <ajust_time+0x138>)
 80005d4:	480f      	ldr	r0, [pc, #60]	; (8000614 <ajust_time+0x13c>)
 80005d6:	f002 fc35 	bl	8002e44 <RTC_WriteTime>
					break;
 80005da:	e010      	b.n	80005fe <ajust_time+0x126>
				}
				case ALARM_HOUR_STATE:
				{
					up_down_number(&hour_alarm,23,0,plus);
 80005dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e0:	2200      	movs	r2, #0
 80005e2:	2117      	movs	r1, #23
 80005e4:	4810      	ldr	r0, [pc, #64]	; (8000628 <ajust_time+0x150>)
 80005e6:	f7ff fe17 	bl	8000218 <up_down_number>
					break;
 80005ea:	e008      	b.n	80005fe <ajust_time+0x126>
				}
				case ALARM_MIN_STATE:
				{
					up_down_number(&min_alarm,59,0,plus);
 80005ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f0:	2200      	movs	r2, #0
 80005f2:	213b      	movs	r1, #59	; 0x3b
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <ajust_time+0x154>)
 80005f6:	f7ff fe0f 	bl	8000218 <up_down_number>
					break;
 80005fa:	e000      	b.n	80005fe <ajust_time+0x126>
				}

				default : break;
 80005fc:	bf00      	nop
				}
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000132 	.word	0x20000132
 800060c:	200000e2 	.word	0x200000e2
 8000610:	200000e0 	.word	0x200000e0
 8000614:	200000dc 	.word	0x200000dc
 8000618:	200000e1 	.word	0x200000e1
 800061c:	200000e4 	.word	0x200000e4
 8000620:	200000e5 	.word	0x200000e5
 8000624:	200000e6 	.word	0x200000e6
 8000628:	20000130 	.word	0x20000130
 800062c:	20000131 	.word	0x20000131

08000630 <btn_pressing_callback>:

// ---------callback_button---------------------
void btn_pressing_callback(Button_Typdef *ButtonX)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	if(ButtonX == &btn_up)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a09      	ldr	r2, [pc, #36]	; (8000660 <btn_pressing_callback+0x30>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d103      	bne.n	8000648 <btn_pressing_callback+0x18>
		{
		ajust_time(1);
 8000640:	2001      	movs	r0, #1
 8000642:	f7ff ff49 	bl	80004d8 <ajust_time>
		}
	else if(ButtonX == &btn_down)
		{
		ajust_time(0);
		}
}
 8000646:	e006      	b.n	8000656 <btn_pressing_callback+0x26>
	else if(ButtonX == &btn_down)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <btn_pressing_callback+0x34>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d102      	bne.n	8000656 <btn_pressing_callback+0x26>
		ajust_time(0);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ff41 	bl	80004d8 <ajust_time>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000e8 	.word	0x200000e8
 8000664:	20000118 	.word	0x20000118

08000668 <btn_press_short_callback>:
void btn_press_short_callback(Button_Typdef *ButtonX)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	if(ButtonX == &btn_ok)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <btn_press_short_callback+0x90>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d13a      	bne.n	80006ee <btn_press_short_callback+0x86>
	{
		switch(clock_state)
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <btn_press_short_callback+0x94>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b08      	cmp	r3, #8
 800067e:	d835      	bhi.n	80006ec <btn_press_short_callback+0x84>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <btn_press_short_callback+0x20>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006ad 	.word	0x080006ad
 800068c:	080006b5 	.word	0x080006b5
 8000690:	080006bd 	.word	0x080006bd
 8000694:	080006ed 	.word	0x080006ed
 8000698:	080006c5 	.word	0x080006c5
 800069c:	080006cd 	.word	0x080006cd
 80006a0:	080006d5 	.word	0x080006d5
 80006a4:	080006dd 	.word	0x080006dd
 80006a8:	080006e5 	.word	0x080006e5
		{
		case NORMAL_STATE:
			clock_state = SETTING_HOUR_STATE;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <btn_press_short_callback+0x94>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
			break;
 80006b2:	e01c      	b.n	80006ee <btn_press_short_callback+0x86>
		case SETTING_HOUR_STATE:
			clock_state = SETTING_MIN_STATE;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <btn_press_short_callback+0x94>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	701a      	strb	r2, [r3, #0]
			break;
 80006ba:	e018      	b.n	80006ee <btn_press_short_callback+0x86>
		case SETTING_MIN_STATE:
			clock_state = SETTING_DATE_STATE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <btn_press_short_callback+0x94>)
 80006be:	2204      	movs	r2, #4
 80006c0:	701a      	strb	r2, [r3, #0]
			break;
 80006c2:	e014      	b.n	80006ee <btn_press_short_callback+0x86>
		case SETTING_DATE_STATE:
			clock_state = SETTING_MONTH_STATE;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <btn_press_short_callback+0x94>)
 80006c6:	2205      	movs	r2, #5
 80006c8:	701a      	strb	r2, [r3, #0]
			break;
 80006ca:	e010      	b.n	80006ee <btn_press_short_callback+0x86>
		case SETTING_MONTH_STATE:
			clock_state = SETTING_YEAR_STATE;
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <btn_press_short_callback+0x94>)
 80006ce:	2206      	movs	r2, #6
 80006d0:	701a      	strb	r2, [r3, #0]
			break;
 80006d2:	e00c      	b.n	80006ee <btn_press_short_callback+0x86>
		case SETTING_YEAR_STATE:
			clock_state = NORMAL_STATE;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <btn_press_short_callback+0x94>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
			break;
 80006da:	e008      	b.n	80006ee <btn_press_short_callback+0x86>
		case ALARM_HOUR_STATE:
			clock_state = ALARM_MIN_STATE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <btn_press_short_callback+0x94>)
 80006de:	2208      	movs	r2, #8
 80006e0:	701a      	strb	r2, [r3, #0]
			break;
 80006e2:	e004      	b.n	80006ee <btn_press_short_callback+0x86>
		case ALARM_MIN_STATE:
			clock_state = NORMAL_STATE;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <btn_press_short_callback+0x94>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
			break;
 80006ea:	e000      	b.n	80006ee <btn_press_short_callback+0x86>
		default : break;
 80006ec:	bf00      	nop

		}

	}

}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	20000100 	.word	0x20000100
 80006fc:	20000132 	.word	0x20000132

08000700 <btn_press_timeout_callback>:
void btn_press_timeout_callback(Button_Typdef *ButtonX) // nhan giu
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	if(ButtonX == &btn_ok)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <btn_press_timeout_callback+0x38>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d10e      	bne.n	800072e <btn_press_timeout_callback+0x2e>
		{
			clock_state = ALARM_HOUR_STATE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <btn_press_timeout_callback+0x3c>)
 8000712:	2207      	movs	r2, #7
 8000714:	701a      	strb	r2, [r3, #0]
			lcd_clear_display(&lcd);
 8000716:	480a      	ldr	r0, [pc, #40]	; (8000740 <btn_press_timeout_callback+0x40>)
 8000718:	f002 fa92 	bl	8002c40 <lcd_clear_display>
			lcd_set_cursor(&lcd,0,5);
 800071c:	2205      	movs	r2, #5
 800071e:	2100      	movs	r1, #0
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <btn_press_timeout_callback+0x40>)
 8000722:	f002 fa9d 	bl	8002c60 <lcd_set_cursor>
			lcd_printf(&lcd, "ALARM");
 8000726:	4907      	ldr	r1, [pc, #28]	; (8000744 <btn_press_timeout_callback+0x44>)
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <btn_press_timeout_callback+0x40>)
 800072a:	f002 fad3 	bl	8002cd4 <lcd_printf>
		}
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000100 	.word	0x20000100
 800073c:	20000132 	.word	0x20000132
 8000740:	200000d0 	.word	0x200000d0
 8000744:	08003b84 	.word	0x08003b84

08000748 <check_alarm>:

//------------alarm------------
void check_alarm()
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	if((hour_alarm == hrtc.datetime.hour) && (min_alarm == hrtc.datetime.min))
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <check_alarm+0x1c>)
 800074e:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <check_alarm+0x20>)
 8000754:	f993 3000 	ldrsb.w	r3, [r3]
 8000758:	429a      	cmp	r2, r3
	{
				// todo
	}
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200000dc 	.word	0x200000dc
 8000768:	20000130 	.word	0x20000130

0800076c <alarm_screen>:

void alarm_screen()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
	static uint32_t t_blink =0;
	static uint8_t is_show =1;
	char line2[16] ;
	if(HAL_GetTick() - t_blink >= 300)
 8000772:	f000 faf3 	bl	8000d5c <HAL_GetTick>
 8000776:	4602      	mov	r2, r0
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <alarm_screen+0xb0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000782:	d346      	bcc.n	8000812 <alarm_screen+0xa6>
	 {
		is_show = ! is_show;
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <alarm_screen+0xb4>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	bf0c      	ite	eq
 800078c:	2301      	moveq	r3, #1
 800078e:	2300      	movne	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <alarm_screen+0xb4>)
 8000796:	701a      	strb	r2, [r3, #0]
	    RTC_ReadTime(&hrtc,&hrtc.datetime);
 8000798:	4922      	ldr	r1, [pc, #136]	; (8000824 <alarm_screen+0xb8>)
 800079a:	4823      	ldr	r0, [pc, #140]	; (8000828 <alarm_screen+0xbc>)
 800079c:	f002 fba6 	bl	8002eec <RTC_ReadTime>
/*		uint8_t day_of_week = RTC_READ_DAY_OF_WEEK(&hrtc.datetime);*/
   sprintf(line2,"%02d:%02d",hour_alarm,min_alarm);
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <alarm_screen+0xc0>)
 80007a2:	f993 3000 	ldrsb.w	r3, [r3]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <alarm_screen+0xc4>)
 80007aa:	f993 3000 	ldrsb.w	r3, [r3]
 80007ae:	4638      	mov	r0, r7
 80007b0:	4920      	ldr	r1, [pc, #128]	; (8000834 <alarm_screen+0xc8>)
 80007b2:	f002 fcf3 	bl	800319c <siprintf>
		if(is_show)
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <alarm_screen+0xb4>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d010      	beq.n	80007e0 <alarm_screen+0x74>
		{
			switch(clock_state)
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <alarm_screen+0xcc>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b07      	cmp	r3, #7
 80007c4:	d002      	beq.n	80007cc <alarm_screen+0x60>
 80007c6:	2b08      	cmp	r3, #8
 80007c8:	d005      	beq.n	80007d6 <alarm_screen+0x6a>
				line2[0] = line2[1] = ' ';
				break;
			case ALARM_MIN_STATE:
				line2[3] = line2[4] = ' ';
				break;
			default : break;
 80007ca:	e009      	b.n	80007e0 <alarm_screen+0x74>
				line2[0] = line2[1] = ' ';
 80007cc:	2320      	movs	r3, #32
 80007ce:	707b      	strb	r3, [r7, #1]
 80007d0:	787b      	ldrb	r3, [r7, #1]
 80007d2:	703b      	strb	r3, [r7, #0]
				break;
 80007d4:	e004      	b.n	80007e0 <alarm_screen+0x74>
				line2[3] = line2[4] = ' ';
 80007d6:	2320      	movs	r3, #32
 80007d8:	713b      	strb	r3, [r7, #4]
 80007da:	793b      	ldrb	r3, [r7, #4]
 80007dc:	70fb      	strb	r3, [r7, #3]
				break;
 80007de:	bf00      	nop
			}
		 }
			lcd_set_cursor(&lcd,0,5);
 80007e0:	2205      	movs	r2, #5
 80007e2:	2100      	movs	r1, #0
 80007e4:	4815      	ldr	r0, [pc, #84]	; (800083c <alarm_screen+0xd0>)
 80007e6:	f002 fa3b 	bl	8002c60 <lcd_set_cursor>
			lcd_printf(&lcd, "ALARM");
 80007ea:	4915      	ldr	r1, [pc, #84]	; (8000840 <alarm_screen+0xd4>)
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <alarm_screen+0xd0>)
 80007ee:	f002 fa71 	bl	8002cd4 <lcd_printf>
			lcd_set_cursor(&lcd, 1, 5);
 80007f2:	2205      	movs	r2, #5
 80007f4:	2101      	movs	r1, #1
 80007f6:	4811      	ldr	r0, [pc, #68]	; (800083c <alarm_screen+0xd0>)
 80007f8:	f002 fa32 	bl	8002c60 <lcd_set_cursor>
			lcd_printf(&lcd, "%s ",line2);
 80007fc:	463b      	mov	r3, r7
 80007fe:	461a      	mov	r2, r3
 8000800:	4910      	ldr	r1, [pc, #64]	; (8000844 <alarm_screen+0xd8>)
 8000802:	480e      	ldr	r0, [pc, #56]	; (800083c <alarm_screen+0xd0>)
 8000804:	f002 fa66 	bl	8002cd4 <lcd_printf>
			t_blink = HAL_GetTick();
 8000808:	f000 faa8 	bl	8000d5c <HAL_GetTick>
 800080c:	4603      	mov	r3, r0
 800080e:	4a03      	ldr	r2, [pc, #12]	; (800081c <alarm_screen+0xb0>)
 8000810:	6013      	str	r3, [r2, #0]
	 }
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000013c 	.word	0x2000013c
 8000820:	20000001 	.word	0x20000001
 8000824:	200000e0 	.word	0x200000e0
 8000828:	200000dc 	.word	0x200000dc
 800082c:	20000130 	.word	0x20000130
 8000830:	20000131 	.word	0x20000131
 8000834:	08003b8c 	.word	0x08003b8c
 8000838:	20000132 	.word	0x20000132
 800083c:	200000d0 	.word	0x200000d0
 8000840:	08003b84 	.word	0x08003b84
 8000844:	08003b80 	.word	0x08003b80

08000848 <clock_handle>:


// ---------------handle_clock------------
void clock_handle()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	switch(clock_state)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <clock_handle+0x54>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b08      	cmp	r3, #8
 8000852:	d820      	bhi.n	8000896 <clock_handle+0x4e>
 8000854:	a201      	add	r2, pc, #4	; (adr r2, 800085c <clock_handle+0x14>)
 8000856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085a:	bf00      	nop
 800085c:	08000881 	.word	0x08000881
 8000860:	0800088b 	.word	0x0800088b
 8000864:	0800088b 	.word	0x0800088b
 8000868:	08000897 	.word	0x08000897
 800086c:	0800088b 	.word	0x0800088b
 8000870:	0800088b 	.word	0x0800088b
 8000874:	0800088b 	.word	0x0800088b
 8000878:	08000891 	.word	0x08000891
 800087c:	08000891 	.word	0x08000891
				{
	case NORMAL_STATE:

		clock_time_update();
 8000880:	f7ff fc6c 	bl	800015c <clock_time_update>
		check_alarm();
 8000884:	f7ff ff60 	bl	8000748 <check_alarm>
		 break;
 8000888:	e006      	b.n	8000898 <clock_handle+0x50>
	case SETTING_HOUR_STATE:
	case SETTING_MIN_STATE:
	case SETTING_DATE_STATE:
	case SETTING_MONTH_STATE:
	case SETTING_YEAR_STATE:
		setting_blink();
 800088a:	f7ff fd73 	bl	8000374 <setting_blink>
		break;
 800088e:	e003      	b.n	8000898 <clock_handle+0x50>
	case ALARM_HOUR_STATE:
	case ALARM_MIN_STATE:
		alarm_screen();
 8000890:	f7ff ff6c 	bl	800076c <alarm_screen>
		break;
 8000894:	e000      	b.n	8000898 <clock_handle+0x50>
	default : break;
 8000896:	bf00      	nop
				}
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000132 	.word	0x20000132

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a4:	f000 fa02 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a8:	f000 f836 	bl	8000918 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  lcd_init(&lcd, &hi2c1, LCD_ADDR_DEFAULT);
 80008ac:	2227      	movs	r2, #39	; 0x27
 80008ae:	4913      	ldr	r1, [pc, #76]	; (80008fc <main+0x5c>)
 80008b0:	4813      	ldr	r0, [pc, #76]	; (8000900 <main+0x60>)
 80008b2:	f002 fa46 	bl	8002d42 <lcd_init>
  RTC_Init(&hrtc ,&hi2c1);
 80008b6:	4911      	ldr	r1, [pc, #68]	; (80008fc <main+0x5c>)
 80008b8:	4812      	ldr	r0, [pc, #72]	; (8000904 <main+0x64>)
 80008ba:	f002 fbc9 	bl	8003050 <RTC_Init>
  button_init(&btn_ok, GPIOA, GPIO_PIN_1);
 80008be:	2202      	movs	r2, #2
 80008c0:	4911      	ldr	r1, [pc, #68]	; (8000908 <main+0x68>)
 80008c2:	4812      	ldr	r0, [pc, #72]	; (800090c <main+0x6c>)
 80008c4:	f002 fc4f 	bl	8003166 <button_init>
  button_init(&btn_down, GPIOA, GPIO_PIN_0);
 80008c8:	2201      	movs	r2, #1
 80008ca:	490f      	ldr	r1, [pc, #60]	; (8000908 <main+0x68>)
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <main+0x70>)
 80008ce:	f002 fc4a 	bl	8003166 <button_init>
  button_init(&btn_up, GPIOA, GPIO_PIN_2);
 80008d2:	2204      	movs	r2, #4
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <main+0x68>)
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <main+0x74>)
 80008d8:	f002 fc45 	bl	8003166 <button_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 f890 	bl	8000a00 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008e0:	f000 f860 	bl	80009a4 <MX_I2C1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  button_handle(&btn_up);
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <main+0x74>)
 80008e6:	f002 fbc9 	bl	800307c <button_handle>
	  button_handle(&btn_ok);
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <main+0x6c>)
 80008ec:	f002 fbc6 	bl	800307c <button_handle>
	  button_handle(&btn_down);
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <main+0x70>)
 80008f2:	f002 fbc3 	bl	800307c <button_handle>
	  clock_handle();
 80008f6:	f7ff ffa7 	bl	8000848 <clock_handle>
	  button_handle(&btn_up);
 80008fa:	e7f3      	b.n	80008e4 <main+0x44>
 80008fc:	2000007c 	.word	0x2000007c
 8000900:	200000d0 	.word	0x200000d0
 8000904:	200000dc 	.word	0x200000dc
 8000908:	40010800 	.word	0x40010800
 800090c:	20000100 	.word	0x20000100
 8000910:	20000118 	.word	0x20000118
 8000914:	200000e8 	.word	0x200000e8

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b090      	sub	sp, #64	; 0x40
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0318 	add.w	r3, r7, #24
 8000922:	2228      	movs	r2, #40	; 0x28
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fc78 	bl	800321c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000948:	2301      	movs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000956:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800095a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 0318 	add.w	r3, r7, #24
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fcf5 	bl	8002350 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800096c:	f000 f89e 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	230f      	movs	r3, #15
 8000972:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000974:	2302      	movs	r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2102      	movs	r1, #2
 800098a:	4618      	mov	r0, r3
 800098c:	f001 ff62 	bl	8002854 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000996:	f000 f889 	bl	8000aac <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3740      	adds	r7, #64	; 0x40
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_I2C1_Init+0x50>)
 80009aa:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_I2C1_Init+0x50>)
 80009b0:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_I2C1_Init+0x58>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_I2C1_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_I2C1_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_I2C1_Init+0x50>)
 80009c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_I2C1_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_I2C1_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_I2C1_Init+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_I2C1_Init+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_I2C1_Init+0x50>)
 80009e2:	f000 fc81 	bl	80012e8 <HAL_I2C_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009ec:	f000 f85e 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000007c 	.word	0x2000007c
 80009f8:	40005400 	.word	0x40005400
 80009fc:	000186a0 	.word	0x000186a0

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <MX_GPIO_Init+0xa4>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <MX_GPIO_Init+0xa4>)
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0xa4>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0320 	and.w	r3, r3, #32
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_GPIO_Init+0xa4>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <MX_GPIO_Init+0xa4>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_GPIO_Init+0xa4>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_GPIO_Init+0xa4>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <MX_GPIO_Init+0xa4>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_GPIO_Init+0xa4>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2108      	movs	r1, #8
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a62:	f000 fc28 	bl	80012b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a66:	2307      	movs	r3, #7
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4619      	mov	r1, r3
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a7a:	f000 fa81 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a7e:	2308      	movs	r3, #8
 8000a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a96:	f000 fa73 	bl	8000f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010800 	.word	0x40010800

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_MspInit+0x5c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_MspInit+0x5c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_MspInit+0x60>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_MspInit+0x60>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000

08000b1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <HAL_I2C_MspInit+0x70>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d123      	bne.n	8000b84 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_I2C_MspInit+0x74>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_I2C_MspInit+0x74>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_I2C_MspInit+0x74>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b54:	23c0      	movs	r3, #192	; 0xc0
 8000b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b58:	2312      	movs	r3, #18
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4619      	mov	r1, r3
 8000b66:	480b      	ldr	r0, [pc, #44]	; (8000b94 <HAL_I2C_MspInit+0x78>)
 8000b68:	f000 fa0a 	bl	8000f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_I2C_MspInit+0x74>)
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_I2C_MspInit+0x74>)
 8000b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b76:	61d3      	str	r3, [r2, #28]
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_I2C_MspInit+0x74>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010c00 	.word	0x40010c00

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr

08000bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bde:	f000 f8ab 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f002 fb08 	bl	800322c <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20005000 	.word	0x20005000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	20000140 	.word	0x20000140
 8000c50:	20000290 	.word	0x20000290

08000c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff fff8 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c66:	490c      	ldr	r1, [pc, #48]	; (8000c98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c68:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a09      	ldr	r2, [pc, #36]	; (8000ca0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c7c:	4c09      	ldr	r4, [pc, #36]	; (8000ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f002 fad5 	bl	8003238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8e:	f7ff fe07 	bl	80008a0 <main>
  bx lr
 8000c92:	4770      	bx	lr
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c9c:	08003c1c 	.word	0x08003c1c
  ldr r2, =_sbss
 8000ca0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ca4:	20000290 	.word	0x20000290

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_Init+0x28>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_Init+0x28>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f92b 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f000 f808 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fef6 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x54>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x58>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f935 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00e      	b.n	8000d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d80a      	bhi.n	8000d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f000 f90b 	bl	8000f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <HAL_InitTick+0x5c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000004 	.word	0x20000004
 8000d30:	2000000c 	.word	0x2000000c
 8000d34:	20000008 	.word	0x20000008

08000d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x1c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x20>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_IncTick+0x20>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	2000000c 	.word	0x2000000c
 8000d58:	20000144 	.word	0x20000144

08000d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <HAL_GetTick+0x10>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	20000144 	.word	0x20000144

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff fff0 	bl	8000d5c <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffe0 	bl	8000d5c <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000000c 	.word	0x2000000c

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff90 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff49 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff5e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff90 	bl	8000e70 <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5f 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffb0 	bl	8000ed4 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b08b      	sub	sp, #44	; 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f92:	e169      	b.n	8001268 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f94:	2201      	movs	r2, #1
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8158 	bne.w	8001262 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4a9a      	ldr	r2, [pc, #616]	; (8001220 <HAL_GPIO_Init+0x2a0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d05e      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fbc:	4a98      	ldr	r2, [pc, #608]	; (8001220 <HAL_GPIO_Init+0x2a0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d875      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fc2:	4a98      	ldr	r2, [pc, #608]	; (8001224 <HAL_GPIO_Init+0x2a4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d058      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fc8:	4a96      	ldr	r2, [pc, #600]	; (8001224 <HAL_GPIO_Init+0x2a4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d86f      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fce:	4a96      	ldr	r2, [pc, #600]	; (8001228 <HAL_GPIO_Init+0x2a8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d052      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fd4:	4a94      	ldr	r2, [pc, #592]	; (8001228 <HAL_GPIO_Init+0x2a8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d869      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fda:	4a94      	ldr	r2, [pc, #592]	; (800122c <HAL_GPIO_Init+0x2ac>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d04c      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fe0:	4a92      	ldr	r2, [pc, #584]	; (800122c <HAL_GPIO_Init+0x2ac>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d863      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fe6:	4a92      	ldr	r2, [pc, #584]	; (8001230 <HAL_GPIO_Init+0x2b0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d046      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fec:	4a90      	ldr	r2, [pc, #576]	; (8001230 <HAL_GPIO_Init+0x2b0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d85d      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d82a      	bhi.n	800104c <HAL_GPIO_Init+0xcc>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d859      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000ffa:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <HAL_GPIO_Init+0x80>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	0800107b 	.word	0x0800107b
 8001004:	08001055 	.word	0x08001055
 8001008:	08001067 	.word	0x08001067
 800100c:	080010a9 	.word	0x080010a9
 8001010:	080010af 	.word	0x080010af
 8001014:	080010af 	.word	0x080010af
 8001018:	080010af 	.word	0x080010af
 800101c:	080010af 	.word	0x080010af
 8001020:	080010af 	.word	0x080010af
 8001024:	080010af 	.word	0x080010af
 8001028:	080010af 	.word	0x080010af
 800102c:	080010af 	.word	0x080010af
 8001030:	080010af 	.word	0x080010af
 8001034:	080010af 	.word	0x080010af
 8001038:	080010af 	.word	0x080010af
 800103c:	080010af 	.word	0x080010af
 8001040:	080010af 	.word	0x080010af
 8001044:	0800105d 	.word	0x0800105d
 8001048:	08001071 	.word	0x08001071
 800104c:	4a79      	ldr	r2, [pc, #484]	; (8001234 <HAL_GPIO_Init+0x2b4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001052:	e02c      	b.n	80010ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e029      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	3304      	adds	r3, #4
 8001062:	623b      	str	r3, [r7, #32]
          break;
 8001064:	e024      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	3308      	adds	r3, #8
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e01f      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	330c      	adds	r3, #12
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e01a      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001082:	2304      	movs	r3, #4
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e013      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d105      	bne.n	800109c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001090:	2308      	movs	r3, #8
 8001092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	611a      	str	r2, [r3, #16]
          break;
 800109a:	e009      	b.n	80010b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800109c:	2308      	movs	r3, #8
 800109e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	615a      	str	r2, [r3, #20]
          break;
 80010a6:	e003      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
          break;
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          break;
 80010ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	2bff      	cmp	r3, #255	; 0xff
 80010b4:	d801      	bhi.n	80010ba <HAL_GPIO_Init+0x13a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	e001      	b.n	80010be <HAL_GPIO_Init+0x13e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3304      	adds	r3, #4
 80010be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2bff      	cmp	r3, #255	; 0xff
 80010c4:	d802      	bhi.n	80010cc <HAL_GPIO_Init+0x14c>
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	e002      	b.n	80010d2 <HAL_GPIO_Init+0x152>
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	3b08      	subs	r3, #8
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	210f      	movs	r1, #15
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	6a39      	ldr	r1, [r7, #32]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	431a      	orrs	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 80b1 	beq.w	8001262 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001100:	4b4d      	ldr	r3, [pc, #308]	; (8001238 <HAL_GPIO_Init+0x2b8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <HAL_GPIO_Init+0x2b8>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <HAL_GPIO_Init+0x2b8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001118:	4a48      	ldr	r2, [pc, #288]	; (800123c <HAL_GPIO_Init+0x2bc>)
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a40      	ldr	r2, [pc, #256]	; (8001240 <HAL_GPIO_Init+0x2c0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d013      	beq.n	800116c <HAL_GPIO_Init+0x1ec>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a3f      	ldr	r2, [pc, #252]	; (8001244 <HAL_GPIO_Init+0x2c4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d00d      	beq.n	8001168 <HAL_GPIO_Init+0x1e8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a3e      	ldr	r2, [pc, #248]	; (8001248 <HAL_GPIO_Init+0x2c8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x1e4>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3d      	ldr	r2, [pc, #244]	; (800124c <HAL_GPIO_Init+0x2cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d101      	bne.n	8001160 <HAL_GPIO_Init+0x1e0>
 800115c:	2303      	movs	r3, #3
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001160:	2304      	movs	r3, #4
 8001162:	e004      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001164:	2302      	movs	r3, #2
 8001166:	e002      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 800116c:	2300      	movs	r3, #0
 800116e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001170:	f002 0203 	and.w	r2, r2, #3
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	4093      	lsls	r3, r2
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800117e:	492f      	ldr	r1, [pc, #188]	; (800123c <HAL_GPIO_Init+0x2bc>)
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	492c      	ldr	r1, [pc, #176]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	608b      	str	r3, [r1, #8]
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011a6:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4928      	ldr	r1, [pc, #160]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	4922      	ldr	r1, [pc, #136]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60cb      	str	r3, [r1, #12]
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	491e      	ldr	r1, [pc, #120]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 80011d8:	4013      	ands	r3, r2
 80011da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4918      	ldr	r1, [pc, #96]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4914      	ldr	r1, [pc, #80]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 8001200:	4013      	ands	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d021      	beq.n	8001254 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	490e      	ldr	r1, [pc, #56]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e021      	b.n	8001262 <HAL_GPIO_Init+0x2e2>
 800121e:	bf00      	nop
 8001220:	10320000 	.word	0x10320000
 8001224:	10310000 	.word	0x10310000
 8001228:	10220000 	.word	0x10220000
 800122c:	10210000 	.word	0x10210000
 8001230:	10120000 	.word	0x10120000
 8001234:	10110000 	.word	0x10110000
 8001238:	40021000 	.word	0x40021000
 800123c:	40010000 	.word	0x40010000
 8001240:	40010800 	.word	0x40010800
 8001244:	40010c00 	.word	0x40010c00
 8001248:	40011000 	.word	0x40011000
 800124c:	40011400 	.word	0x40011400
 8001250:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_GPIO_Init+0x304>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	43db      	mvns	r3, r3
 800125c:	4909      	ldr	r1, [pc, #36]	; (8001284 <HAL_GPIO_Init+0x304>)
 800125e:	4013      	ands	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	3301      	adds	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f ae8e 	bne.w	8000f94 <HAL_GPIO_Init+0x14>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	372c      	adds	r7, #44	; 0x2c
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e001      	b.n	80012aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]
 80012c2:	4613      	mov	r3, r2
 80012c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c6:	787b      	ldrb	r3, [r7, #1]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012cc:	887a      	ldrh	r2, [r7, #2]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012d2:	e003      	b.n	80012dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	041a      	lsls	r2, r3, #16
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	611a      	str	r2, [r3, #16]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e12b      	b.n	8001552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fc04 	bl	8000b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2224      	movs	r2, #36	; 0x24
 8001318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800133a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800134a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800134c:	f001 fbca 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8001350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a81      	ldr	r2, [pc, #516]	; (800155c <HAL_I2C_Init+0x274>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d807      	bhi.n	800136c <HAL_I2C_Init+0x84>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4a80      	ldr	r2, [pc, #512]	; (8001560 <HAL_I2C_Init+0x278>)
 8001360:	4293      	cmp	r3, r2
 8001362:	bf94      	ite	ls
 8001364:	2301      	movls	r3, #1
 8001366:	2300      	movhi	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e006      	b.n	800137a <HAL_I2C_Init+0x92>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a7d      	ldr	r2, [pc, #500]	; (8001564 <HAL_I2C_Init+0x27c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	bf94      	ite	ls
 8001374:	2301      	movls	r3, #1
 8001376:	2300      	movhi	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0e7      	b.n	8001552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4a78      	ldr	r2, [pc, #480]	; (8001568 <HAL_I2C_Init+0x280>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	430a      	orrs	r2, r1
 80013a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a6a      	ldr	r2, [pc, #424]	; (800155c <HAL_I2C_Init+0x274>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d802      	bhi.n	80013bc <HAL_I2C_Init+0xd4>
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	e009      	b.n	80013d0 <HAL_I2C_Init+0xe8>
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4a69      	ldr	r2, [pc, #420]	; (800156c <HAL_I2C_Init+0x284>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	3301      	adds	r3, #1
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	495c      	ldr	r1, [pc, #368]	; (800155c <HAL_I2C_Init+0x274>)
 80013ec:	428b      	cmp	r3, r1
 80013ee:	d819      	bhi.n	8001424 <HAL_I2C_Init+0x13c>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1e59      	subs	r1, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80013fe:	1c59      	adds	r1, r3, #1
 8001400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001404:	400b      	ands	r3, r1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00a      	beq.n	8001420 <HAL_I2C_Init+0x138>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e59      	subs	r1, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fbb1 f3f3 	udiv	r3, r1, r3
 8001418:	3301      	adds	r3, #1
 800141a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141e:	e051      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 8001420:	2304      	movs	r3, #4
 8001422:	e04f      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_I2C_Init+0x168>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	e012      	b.n	8001476 <HAL_I2C_Init+0x18e>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e58      	subs	r0, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6859      	ldr	r1, [r3, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	0099      	lsls	r1, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	fbb0 f3f3 	udiv	r3, r0, r3
 8001466:	3301      	adds	r3, #1
 8001468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf0c      	ite	eq
 8001470:	2301      	moveq	r3, #1
 8001472:	2300      	movne	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Init+0x196>
 800147a:	2301      	movs	r3, #1
 800147c:	e022      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10e      	bne.n	80014a4 <HAL_I2C_Init+0x1bc>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1e58      	subs	r0, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	440b      	add	r3, r1
 8001494:	fbb0 f3f3 	udiv	r3, r0, r3
 8001498:	3301      	adds	r3, #1
 800149a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a2:	e00f      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1e58      	subs	r0, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	0099      	lsls	r1, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	6809      	ldr	r1, [r1, #0]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6911      	ldr	r1, [r2, #16]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68d2      	ldr	r2, [r2, #12]
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	430b      	orrs	r3, r1
 8001506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	000186a0 	.word	0x000186a0
 8001560:	001e847f 	.word	0x001e847f
 8001564:	003d08ff 	.word	0x003d08ff
 8001568:	431bde83 	.word	0x431bde83
 800156c:	10624dd3 	.word	0x10624dd3

08001570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	460b      	mov	r3, r1
 800157e:	817b      	strh	r3, [r7, #10]
 8001580:	4613      	mov	r3, r2
 8001582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff fbea 	bl	8000d5c <HAL_GetTick>
 8001588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b20      	cmp	r3, #32
 8001594:	f040 80e0 	bne.w	8001758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2319      	movs	r3, #25
 800159e:	2201      	movs	r2, #1
 80015a0:	4970      	ldr	r1, [pc, #448]	; (8001764 <HAL_I2C_Master_Transmit+0x1f4>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 fc9e 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015ae:	2302      	movs	r3, #2
 80015b0:	e0d3      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_I2C_Master_Transmit+0x50>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0cc      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d007      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2221      	movs	r2, #33	; 0x21
 80015fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2210      	movs	r2, #16
 8001602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	893a      	ldrh	r2, [r7, #8]
 8001616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_I2C_Master_Transmit+0x1f8>)
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001628:	8979      	ldrh	r1, [r7, #10]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 fb08 	bl	8001c44 <I2C_MasterRequestWrite>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e08d      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001654:	e066      	b.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 fd5c 	bl	8002118 <I2C_WaitOnTXEFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2b04      	cmp	r3, #4
 800166c:	d107      	bne.n	800167e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800167c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d11b      	bne.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fd53 	bl	80021a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00d      	beq.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2b04      	cmp	r3, #4
 800170e:	d107      	bne.n	8001720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e01a      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d194      	bne.n	8001656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	00100002 	.word	0x00100002
 8001768:	ffff0000 	.word	0xffff0000

0800176c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	461a      	mov	r2, r3
 8001778:	460b      	mov	r3, r1
 800177a:	817b      	strh	r3, [r7, #10]
 800177c:	4613      	mov	r3, r2
 800177e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff faea 	bl	8000d5c <HAL_GetTick>
 8001788:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b20      	cmp	r3, #32
 8001794:	f040 824b 	bne.w	8001c2e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2319      	movs	r3, #25
 800179e:	2201      	movs	r2, #1
 80017a0:	497f      	ldr	r1, [pc, #508]	; (80019a0 <HAL_I2C_Master_Receive+0x234>)
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 fb9e 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80017ae:	2302      	movs	r3, #2
 80017b0:	e23e      	b.n	8001c30 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_I2C_Master_Receive+0x54>
 80017bc:	2302      	movs	r3, #2
 80017be:	e237      	b.n	8001c30 <HAL_I2C_Master_Receive+0x4c4>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d007      	beq.n	80017e6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0201 	orr.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2222      	movs	r2, #34	; 0x22
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2210      	movs	r2, #16
 8001802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	893a      	ldrh	r2, [r7, #8]
 8001816:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4a5f      	ldr	r2, [pc, #380]	; (80019a4 <HAL_I2C_Master_Receive+0x238>)
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001828:	8979      	ldrh	r1, [r7, #10]
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 fa8a 	bl	8001d48 <I2C_MasterRequestRead>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e1f8      	b.n	8001c30 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	2b00      	cmp	r3, #0
 8001844:	d113      	bne.n	800186e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e1cc      	b.n	8001c08 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	2b01      	cmp	r3, #1
 8001874:	d11e      	bne.n	80018b4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001884:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001886:	b672      	cpsid	i
}
 8001888:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018b0:	b662      	cpsie	i
}
 80018b2:	e035      	b.n	8001920 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d11e      	bne.n	80018fa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018f6:	b662      	cpsie	i
}
 80018f8:	e012      	b.n	8001920 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001920:	e172      	b.n	8001c08 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001926:	2b03      	cmp	r3, #3
 8001928:	f200 811f 	bhi.w	8001b6a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	2b01      	cmp	r3, #1
 8001932:	d123      	bne.n	800197c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fc7d 	bl	8002238 <I2C_WaitOnRXNEFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e173      	b.n	8001c30 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	855a      	strh	r2, [r3, #42]	; 0x2a
 800197a:	e145      	b.n	8001c08 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	2b02      	cmp	r3, #2
 8001982:	d152      	bne.n	8001a2a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198a:	2200      	movs	r2, #0
 800198c:	4906      	ldr	r1, [pc, #24]	; (80019a8 <HAL_I2C_Master_Receive+0x23c>)
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 faa8 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e148      	b.n	8001c30 <HAL_I2C_Master_Receive+0x4c4>
 800199e:	bf00      	nop
 80019a0:	00100002 	.word	0x00100002
 80019a4:	ffff0000 	.word	0xffff0000
 80019a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
}
 80019ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3b01      	subs	r3, #1
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80019f2:	b662      	cpsie	i
}
 80019f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a28:	e0ee      	b.n	8001c08 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a30:	2200      	movs	r2, #0
 8001a32:	4981      	ldr	r1, [pc, #516]	; (8001c38 <HAL_I2C_Master_Receive+0x4cc>)
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 fa55 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0f5      	b.n	8001c30 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001a8a:	4b6c      	ldr	r3, [pc, #432]	; (8001c3c <HAL_I2C_Master_Receive+0x4d0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	08db      	lsrs	r3, r3, #3
 8001a90:	4a6b      	ldr	r2, [pc, #428]	; (8001c40 <HAL_I2C_Master_Receive+0x4d4>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	0a1a      	lsrs	r2, r3, #8
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00da      	lsls	r2, r3, #3
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d118      	bne.n	8001ae2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f043 0220 	orr.w	r2, r3, #32
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001ad2:	b662      	cpsie	i
}
 8001ad4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0a6      	b.n	8001c30 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d1d9      	bne.n	8001aa4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b32:	b662      	cpsie	i
}
 8001b34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b68:	e04e      	b.n	8001c08 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fb62 	bl	8002238 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e058      	b.n	8001c30 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d124      	bne.n	8001c08 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d107      	bne.n	8001bd6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f ae88 	bne.w	8001922 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3728      	adds	r7, #40	; 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	00010004 	.word	0x00010004
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	14f8b589 	.word	0x14f8b589

08001c44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	460b      	mov	r3, r1
 8001c52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d006      	beq.n	8001c6e <I2C_MasterRequestWrite+0x2a>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d003      	beq.n	8001c6e <I2C_MasterRequestWrite+0x2a>
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c6c:	d108      	bne.n	8001c80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e00b      	b.n	8001c98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	2b12      	cmp	r3, #18
 8001c86:	d107      	bne.n	8001c98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f91d 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00d      	beq.n	8001ccc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cbe:	d103      	bne.n	8001cc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e035      	b.n	8001d38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cd4:	d108      	bne.n	8001ce8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cd6:	897b      	ldrh	r3, [r7, #10]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	e01b      	b.n	8001d20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ce8:	897b      	ldrh	r3, [r7, #10]
 8001cea:	11db      	asrs	r3, r3, #7
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f003 0306 	and.w	r3, r3, #6
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f063 030f 	orn	r3, r3, #15
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	490e      	ldr	r1, [pc, #56]	; (8001d40 <I2C_MasterRequestWrite+0xfc>)
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f966 	bl	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e010      	b.n	8001d38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <I2C_MasterRequestWrite+0x100>)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f956 	bl	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	00010008 	.word	0x00010008
 8001d44:	00010002 	.word	0x00010002

08001d48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	460b      	mov	r3, r1
 8001d56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d006      	beq.n	8001d82 <I2C_MasterRequestRead+0x3a>
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d003      	beq.n	8001d82 <I2C_MasterRequestRead+0x3a>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d80:	d108      	bne.n	8001d94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e00b      	b.n	8001dac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	2b11      	cmp	r3, #17
 8001d9a:	d107      	bne.n	8001dac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001daa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f893 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd2:	d103      	bne.n	8001ddc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e079      	b.n	8001ed4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001de8:	d108      	bne.n	8001dfc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	611a      	str	r2, [r3, #16]
 8001dfa:	e05f      	b.n	8001ebc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dfc:	897b      	ldrh	r3, [r7, #10]
 8001dfe:	11db      	asrs	r3, r3, #7
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f003 0306 	and.w	r3, r3, #6
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f063 030f 	orn	r3, r3, #15
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4930      	ldr	r1, [pc, #192]	; (8001edc <I2C_MasterRequestRead+0x194>)
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f8dc 	bl	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e054      	b.n	8001ed4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e2a:	897b      	ldrh	r3, [r7, #10]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4929      	ldr	r1, [pc, #164]	; (8001ee0 <I2C_MasterRequestRead+0x198>)
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f8cc 	bl	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e044      	b.n	8001ed4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f831 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00d      	beq.n	8001ea4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e96:	d103      	bne.n	8001ea0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e017      	b.n	8001ed4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ea4:	897b      	ldrh	r3, [r7, #10]
 8001ea6:	11db      	asrs	r3, r3, #7
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f003 0306 	and.w	r3, r3, #6
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f063 030e 	orn	r3, r3, #14
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4907      	ldr	r1, [pc, #28]	; (8001ee0 <I2C_MasterRequestRead+0x198>)
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f888 	bl	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	00010008 	.word	0x00010008
 8001ee0:	00010002 	.word	0x00010002

08001ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef4:	e048      	b.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d044      	beq.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efe:	f7fe ff2d 	bl	8000d5c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d302      	bcc.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d139      	bne.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	0c1b      	lsrs	r3, r3, #16
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10d      	bne.n	8001f3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	43da      	mvns	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	e00c      	b.n	8001f54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	43da      	mvns	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4013      	ands	r3, r2
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d116      	bne.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e023      	b.n	8001fd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	0c1b      	lsrs	r3, r3, #16
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10d      	bne.n	8001fae <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	e00c      	b.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d093      	beq.n	8001ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fe6:	e071      	b.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff6:	d123      	bne.n	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f043 0204 	orr.w	r2, r3, #4
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e067      	b.n	8002110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d041      	beq.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002048:	f7fe fe88 	bl	8000d5c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d136      	bne.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10c      	bne.n	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4013      	ands	r3, r2
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	bf14      	ite	ne
 800207a:	2301      	movne	r3, #1
 800207c:	2300      	moveq	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	e00b      	b.n	800209a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	43da      	mvns	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4013      	ands	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e021      	b.n	8002110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10c      	bne.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	43da      	mvns	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4013      	ands	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e00b      	b.n	8002108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	f47f af6d 	bne.w	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002124:	e034      	b.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f8e3 	bl	80022f2 <I2C_IsAcknowledgeFailed>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e034      	b.n	80021a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d028      	beq.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213e:	f7fe fe0d 	bl	8000d5c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	429a      	cmp	r2, r3
 800214c:	d302      	bcc.n	8002154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11d      	bne.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	d016      	beq.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b80      	cmp	r3, #128	; 0x80
 800219c:	d1c3      	bne.n	8002126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b4:	e034      	b.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f89b 	bl	80022f2 <I2C_IsAcknowledgeFailed>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e034      	b.n	8002230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d028      	beq.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ce:	f7fe fdc5 	bl	8000d5c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d302      	bcc.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d11d      	bne.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d016      	beq.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e007      	b.n	8002230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b04      	cmp	r3, #4
 800222c:	d1c3      	bne.n	80021b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002244:	e049      	b.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b10      	cmp	r3, #16
 8002252:	d119      	bne.n	8002288 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0210 	mvn.w	r2, #16
 800225c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e030      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002288:	f7fe fd68 	bl	8000d5c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d302      	bcc.n	800229e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d11d      	bne.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d016      	beq.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d1ae      	bne.n	8002246 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002308:	d11b      	bne.n	8002342 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002312:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f043 0204 	orr.w	r2, r3, #4
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
	...

08002350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e272      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8087 	beq.w	800247e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002370:	4b92      	ldr	r3, [pc, #584]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b04      	cmp	r3, #4
 800237a:	d00c      	beq.n	8002396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800237c:	4b8f      	ldr	r3, [pc, #572]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d112      	bne.n	80023ae <HAL_RCC_OscConfig+0x5e>
 8002388:	4b8c      	ldr	r3, [pc, #560]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d10b      	bne.n	80023ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002396:	4b89      	ldr	r3, [pc, #548]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d06c      	beq.n	800247c <HAL_RCC_OscConfig+0x12c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d168      	bne.n	800247c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e24c      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x76>
 80023b8:	4b80      	ldr	r3, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a7f      	ldr	r2, [pc, #508]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	e02e      	b.n	8002424 <HAL_RCC_OscConfig+0xd4>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x98>
 80023ce:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7a      	ldr	r2, [pc, #488]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b78      	ldr	r3, [pc, #480]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a77      	ldr	r2, [pc, #476]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0xd4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0xbc>
 80023f2:	4b72      	ldr	r3, [pc, #456]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a71      	ldr	r2, [pc, #452]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b6f      	ldr	r3, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6e      	ldr	r2, [pc, #440]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0xd4>
 800240c:	4b6b      	ldr	r3, [pc, #428]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6a      	ldr	r2, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a67      	ldr	r2, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7fe fc96 	bl	8000d5c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe fc92 	bl	8000d5c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e200      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b5d      	ldr	r3, [pc, #372]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0xe4>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fc82 	bl	8000d5c <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe fc7e 	bl	8000d5c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1ec      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x10c>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d063      	beq.n	8002552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248a:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002496:	4b49      	ldr	r3, [pc, #292]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d11c      	bne.n	80024dc <HAL_RCC_OscConfig+0x18c>
 80024a2:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x176>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e1c0      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4939      	ldr	r1, [pc, #228]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	e03a      	b.n	8002552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fc37 	bl	8000d5c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe fc33 	bl	8000d5c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1a1      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4927      	ldr	r1, [pc, #156]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
 8002524:	e015      	b.n	8002552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7fe fc16 	bl	8000d5c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7fe fc12 	bl	8000d5c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e180      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d03a      	beq.n	80025d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d019      	beq.n	800259a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_RCC_OscConfig+0x274>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7fe fbf6 	bl	8000d5c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002574:	f7fe fbf2 	bl	8000d5c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e160      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002592:	2001      	movs	r0, #1
 8002594:	f000 faba 	bl	8002b0c <RCC_Delay>
 8002598:	e01c      	b.n	80025d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCC_OscConfig+0x274>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a0:	f7fe fbdc 	bl	8000d5c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a6:	e00f      	b.n	80025c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a8:	f7fe fbd8 	bl	8000d5c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d908      	bls.n	80025c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e146      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	42420000 	.word	0x42420000
 80025c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	4b92      	ldr	r3, [pc, #584]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e9      	bne.n	80025a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a6 	beq.w	800272e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e6:	4b8b      	ldr	r3, [pc, #556]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10d      	bne.n	800260e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b88      	ldr	r3, [pc, #544]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4a87      	ldr	r2, [pc, #540]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	61d3      	str	r3, [r2, #28]
 80025fe:	4b85      	ldr	r3, [pc, #532]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b82      	ldr	r3, [pc, #520]	; (8002818 <HAL_RCC_OscConfig+0x4c8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_RCC_OscConfig+0x4c8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x4c8>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe fb99 	bl	8000d5c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe fb95 	bl	8000d5c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b64      	cmp	r3, #100	; 0x64
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e103      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b75      	ldr	r3, [pc, #468]	; (8002818 <HAL_RCC_OscConfig+0x4c8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x312>
 8002654:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4a6e      	ldr	r2, [pc, #440]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	e02d      	b.n	80026be <HAL_RCC_OscConfig+0x36e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x334>
 800266a:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a69      	ldr	r2, [pc, #420]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6213      	str	r3, [r2, #32]
 8002676:	4b67      	ldr	r3, [pc, #412]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a66      	ldr	r2, [pc, #408]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	e01c      	b.n	80026be <HAL_RCC_OscConfig+0x36e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d10c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x356>
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4a60      	ldr	r2, [pc, #384]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a5d      	ldr	r2, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	e00b      	b.n	80026be <HAL_RCC_OscConfig+0x36e>
 80026a6:	4b5b      	ldr	r3, [pc, #364]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a5a      	ldr	r2, [pc, #360]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	4b58      	ldr	r3, [pc, #352]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a57      	ldr	r2, [pc, #348]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d015      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c6:	f7fe fb49 	bl	8000d5c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fe fb45 	bl	8000d5c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0b1      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ee      	beq.n	80026ce <HAL_RCC_OscConfig+0x37e>
 80026f0:	e014      	b.n	800271c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fb33 	bl	8000d5c <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe fb2f 	bl	8000d5c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e09b      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ee      	bne.n	80026fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002722:	4b3c      	ldr	r3, [pc, #240]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4a3b      	ldr	r2, [pc, #236]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8087 	beq.w	8002846 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002738:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b08      	cmp	r3, #8
 8002742:	d061      	beq.n	8002808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d146      	bne.n	80027da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b33      	ldr	r3, [pc, #204]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7fe fb03 	bl	8000d5c <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275a:	f7fe faff 	bl	8000d5c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e06d      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d108      	bne.n	8002794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4921      	ldr	r1, [pc, #132]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002794:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a19      	ldr	r1, [r3, #32]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	430b      	orrs	r3, r1
 80027a6:	491b      	ldr	r1, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe fad3 	bl	8000d5c <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fe facf 	bl	8000d5c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e03d      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x46a>
 80027d8:	e035      	b.n	8002846 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fabc 	bl	8000d5c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fab8 	bl	8000d5c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e026      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x498>
 8002806:	e01e      	b.n	8002846 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d107      	bne.n	8002820 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e019      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
 8002814:	40021000 	.word	0x40021000
 8002818:	40007000 	.word	0x40007000
 800281c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x500>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000

08002854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0d0      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d910      	bls.n	8002898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b67      	ldr	r3, [pc, #412]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 0207 	bic.w	r2, r3, #7
 800287e:	4965      	ldr	r1, [pc, #404]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0b8      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4a58      	ldr	r2, [pc, #352]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a52      	ldr	r2, [pc, #328]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d4:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	494d      	ldr	r1, [pc, #308]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d040      	beq.n	8002974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d115      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e07f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e073      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e06b      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4936      	ldr	r1, [pc, #216]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7fe fa0a 	bl	8000d5c <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fa06 	bl	8000d5c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e053      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d210      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 0207 	bic.w	r2, r3, #7
 800298a:	4922      	ldr	r1, [pc, #136]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e032      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4916      	ldr	r1, [pc, #88]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d009      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029e2:	f000 f821 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	490a      	ldr	r1, [pc, #40]	; (8002a1c <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	5ccb      	ldrb	r3, [r1, r3]
 80029f6:	fa22 f303 	lsr.w	r3, r2, r3
 80029fa:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1cc>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x1d0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe f968 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40022000 	.word	0x40022000
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	08003bb4 	.word	0x08003bb4
 8002a20:	20000004 	.word	0x20000004
 8002a24:	20000008 	.word	0x20000008

08002a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a42:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_RCC_GetSysClockFreq+0x94>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d002      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x30>
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d003      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0x36>
 8002a56:	e027      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a5a:	613b      	str	r3, [r7, #16]
      break;
 8002a5c:	e027      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	0c9b      	lsrs	r3, r3, #18
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a68:	5cd3      	ldrb	r3, [r2, r3]
 8002a6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d010      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <HAL_RCC_GetSysClockFreq+0x94>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	0c5b      	lsrs	r3, r3, #17
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8a:	fb03 f202 	mul.w	r2, r3, r2
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e004      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a9c:	fb02 f303 	mul.w	r3, r2, r3
 8002aa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aaa:	613b      	str	r3, [r7, #16]
      break;
 8002aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aae:	693b      	ldr	r3, [r7, #16]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	007a1200 	.word	0x007a1200
 8002ac4:	08003bcc 	.word	0x08003bcc
 8002ac8:	08003bdc 	.word	0x08003bdc
 8002acc:	003d0900 	.word	0x003d0900

08002ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b02      	ldr	r3, [pc, #8]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ae8:	f7ff fff2 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08003bc4 	.word	0x08003bc4

08002b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <RCC_Delay+0x34>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <RCC_Delay+0x38>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0a5b      	lsrs	r3, r3, #9
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b28:	bf00      	nop
  }
  while (Delay --);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e5a      	subs	r2, r3, #1
 8002b2e:	60fa      	str	r2, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f9      	bne.n	8002b28 <RCC_Delay+0x1c>
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	20000004 	.word	0x20000004
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <lcd_send_cmd>:
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f023 030f 	bic.w	r3, r3, #15
 8002b5a:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7a5a      	ldrb	r2, [r3, #9]
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	7a5a      	ldrb	r2, [r3, #9]
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7a5a      	ldrb	r2, [r3, #9]
 8002b84:	7bbb      	ldrb	r3, [r7, #14]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7a5a      	ldrb	r2, [r3, #9]
 8002b96:	7bbb      	ldrb	r3, [r7, #14]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6858      	ldr	r0, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	b299      	uxth	r1, r3
 8002ba8:	f107 0208 	add.w	r2, r7, #8
 8002bac:	2364      	movs	r3, #100	; 0x64
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	f7fe fcdd 	bl	8001570 <HAL_I2C_Master_Transmit>
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af02      	add	r7, sp, #8
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	f023 030f 	bic.w	r3, r3, #15
 8002bd0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7a5a      	ldrb	r2, [r3, #9]
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f043 0305 	orr.w	r3, r3, #5
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7a5a      	ldrb	r2, [r3, #9]
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7a5a      	ldrb	r2, [r3, #9]
 8002c00:	7bbb      	ldrb	r3, [r7, #14]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f043 0305 	orr.w	r3, r3, #5
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7a5a      	ldrb	r2, [r3, #9]
 8002c12:	7bbb      	ldrb	r3, [r7, #14]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6858      	ldr	r0, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b299      	uxth	r1, r3
 8002c2a:	f107 0208 	add.w	r2, r7, #8
 8002c2e:	2364      	movs	r3, #100	; 0x64
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2304      	movs	r3, #4
 8002c34:	f7fe fc9c 	bl	8001570 <HAL_I2C_Master_Transmit>
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <lcd_clear_display>:
{
	lcd_send_data(lcd,data);
}

void lcd_clear_display (LiquidCrystal_I2C *lcd)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY);
 8002c48:	2101      	movs	r1, #1
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ff7c 	bl	8002b48 <lcd_send_cmd>
	HAL_Delay(1);
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7fe f88d 	bl	8000d70 <HAL_Delay>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <lcd_set_cursor>:
	lcd->Backlightval = LCD_NOBACKLIGHT;
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
}

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <lcd_set_cursor+0x40>)
 8002c72:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	3310      	adds	r3, #16
 8002c78:	443b      	add	r3, r7
 8002c7a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8002c7e:	78bb      	ldrb	r3, [r7, #2]
 8002c80:	4413      	add	r3, r2
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff59 	bl	8002b48 <lcd_send_cmd>
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	54144000 	.word	0x54144000

08002ca4 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7a1b      	ldrb	r3, [r3, #8]
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7a1b      	ldrb	r3, [r3, #8]
 8002cbe:	f043 0308 	orr.w	r3, r3, #8
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ff3e 	bl	8002b48 <lcd_send_cmd>
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 8002cd4:	b40e      	push	{r1, r2, r3}
 8002cd6:	b590      	push	{r4, r7, lr}
 8002cd8:	b08a      	sub	sp, #40	; 0x28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 8002cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ce2:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 8002ce4:	f107 0310 	add.w	r3, r7, #16
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fa8b 	bl	8003208 <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002cf8:	e00e      	b.n	8002d18 <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 8002cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cfe:	3328      	adds	r3, #40	; 0x28
 8002d00:	443b      	add	r3, r7
 8002d02:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d06:	4619      	mov	r1, r3
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff58 	bl	8002bbe <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8002d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d12:	3301      	adds	r3, #1
 8002d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d18:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8002d1c:	f107 0310 	add.w	r3, r7, #16
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fa13 	bl	800014c <strlen>
 8002d26:	4603      	mov	r3, r0
 8002d28:	429c      	cmp	r4, r3
 8002d2a:	d203      	bcs.n	8002d34 <lcd_printf+0x60>
 8002d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d30:	2b0f      	cmp	r3, #15
 8002d32:	d9e2      	bls.n	8002cfa <lcd_printf+0x26>
  }
}
 8002d34:	bf00      	nop
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002d3e:	b003      	add	sp, #12
 8002d40:	4770      	bx	lr

08002d42 <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd,I2C_HandleTypeDef *_hi2c,uint8_t addr)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71fb      	strb	r3, [r7, #7]
	lcd->pI2c = _hi2c;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	605a      	str	r2, [r3, #4]
	lcd->Addr = addr<<1;
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	701a      	strb	r2, [r3, #0]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	7a1b      	ldrb	r3, [r3, #8]
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd (lcd,0x33); 
 8002d6e:	2133      	movs	r1, #51	; 0x33
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff fee9 	bl	8002b48 <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 8002d76:	2132      	movs	r1, #50	; 0x32
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7ff fee5 	bl	8002b48 <lcd_send_cmd>
	HAL_Delay(5);
 8002d7e:	2005      	movs	r0, #5
 8002d80:	f7fd fff6 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 8002d84:	2101      	movs	r1, #1
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7ff fede 	bl	8002b48 <lcd_send_cmd>
	HAL_Delay(5);
 8002d8c:	2005      	movs	r0, #5
 8002d8e:	f7fd ffef 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 8002d92:	210c      	movs	r1, #12
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff fed7 	bl	8002b48 <lcd_send_cmd>
	HAL_Delay(5);
 8002d9a:	2005      	movs	r0, #5
 8002d9c:	f7fd ffe8 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 8002da0:	2102      	movs	r1, #2
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff fed0 	bl	8002b48 <lcd_send_cmd>
	HAL_Delay(5);
 8002da8:	2005      	movs	r0, #5
 8002daa:	f7fd ffe1 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff fec9 	bl	8002b48 <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff ff74 	bl	8002ca4 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	725a      	strb	r2, [r3, #9]
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <Decimal2BCD>:

#include "RTC.h"


uint8_t Decimal2BCD(uint8_t num)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
return (num/10)<<4|(num%10);
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <Decimal2BCD+0x44>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	08db      	lsrs	r3, r3, #3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	b258      	sxtb	r0, r3
 8002de6:	79fa      	ldrb	r2, [r7, #7]
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <Decimal2BCD+0x44>)
 8002dea:	fba3 1302 	umull	r1, r3, r3, r2
 8002dee:	08d9      	lsrs	r1, r3, #3
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	4303      	orrs	r3, r0
 8002e00:	b25b      	sxtb	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	cccccccd 	.word	0xcccccccd

08002e14 <BCD2Decimal>:
uint8_t BCD2Decimal(uint8_t num)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
return (num>>4)*10+(num&0x0F);
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	b2db      	uxtb	r3, r3
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <RTC_WriteTime>:

void RTC_WriteTime(RTC_typedef *rtc ,Datetime *dt)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
	uint8_t buff[8];
	buff[0] = 0x00;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	723b      	strb	r3, [r7, #8]
	buff[1] = Decimal2BCD (dt ->sec);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f993 3000 	ldrsb.w	r3, [r3]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ffb6 	bl	8002dcc <Decimal2BCD>
 8002e60:	4603      	mov	r3, r0
 8002e62:	727b      	strb	r3, [r7, #9]
	buff[2] = Decimal2BCD (dt ->min);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ffad 	bl	8002dcc <Decimal2BCD>
 8002e72:	4603      	mov	r3, r0
 8002e74:	72bb      	strb	r3, [r7, #10]
	buff[3] = Decimal2BCD (dt ->hour);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ffa4 	bl	8002dcc <Decimal2BCD>
 8002e84:	4603      	mov	r3, r0
 8002e86:	72fb      	strb	r3, [r7, #11]
	buff[4] = Decimal2BCD (dt -> day);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff9b 	bl	8002dcc <Decimal2BCD>
 8002e96:	4603      	mov	r3, r0
 8002e98:	733b      	strb	r3, [r7, #12]
	buff[5] = Decimal2BCD (dt ->date);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff92 	bl	8002dcc <Decimal2BCD>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	737b      	strb	r3, [r7, #13]
	buff[6] = Decimal2BCD (dt -> month);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff89 	bl	8002dcc <Decimal2BCD>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	73bb      	strb	r3, [r7, #14]
	buff[7] = Decimal2BCD (dt ->year);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff80 	bl	8002dcc <Decimal2BCD>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(rtc -> rtc_i2c, RTC_ADDR, buff, 8, 100);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	f107 0208 	add.w	r2, r7, #8
 8002ed8:	2364      	movs	r3, #100	; 0x64
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2308      	movs	r3, #8
 8002ede:	21d0      	movs	r1, #208	; 0xd0
 8002ee0:	f7fe fb46 	bl	8001570 <HAL_I2C_Master_Transmit>
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <RTC_ReadTime>:
void RTC_ReadTime(RTC_typedef *rtc ,Datetime *dt)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
	uint8_t buff[7];
	uint8_t addr_reg = 0x00;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(rtc -> rtc_i2c, RTC_ADDR, &addr_reg, 1, 100);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	f107 020f 	add.w	r2, r7, #15
 8002f02:	2364      	movs	r3, #100	; 0x64
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2301      	movs	r3, #1
 8002f08:	21d0      	movs	r1, #208	; 0xd0
 8002f0a:	f7fe fb31 	bl	8001570 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(rtc -> rtc_i2c, RTC_ADDR, buff, 7, 100);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	f107 0210 	add.w	r2, r7, #16
 8002f16:	2364      	movs	r3, #100	; 0x64
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2307      	movs	r3, #7
 8002f1c:	21d0      	movs	r1, #208	; 0xd0
 8002f1e:	f7fe fc25 	bl	800176c <HAL_I2C_Master_Receive>
	dt -> sec = BCD2Decimal (buff[0]);
 8002f22:	7c3b      	ldrb	r3, [r7, #16]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff75 	bl	8002e14 <BCD2Decimal>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	b25a      	sxtb	r2, r3
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	701a      	strb	r2, [r3, #0]
	dt -> min = BCD2Decimal (buff[1]);
 8002f32:	7c7b      	ldrb	r3, [r7, #17]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff6d 	bl	8002e14 <BCD2Decimal>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b25a      	sxtb	r2, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	705a      	strb	r2, [r3, #1]
	dt -> hour = BCD2Decimal (buff[2]);
 8002f42:	7cbb      	ldrb	r3, [r7, #18]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff65 	bl	8002e14 <BCD2Decimal>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	b25a      	sxtb	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	709a      	strb	r2, [r3, #2]
	dt -> day = BCD2Decimal (buff[3]);
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff5d 	bl	8002e14 <BCD2Decimal>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	b25a      	sxtb	r2, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	70da      	strb	r2, [r3, #3]
	dt -> date = BCD2Decimal (buff[4]);
 8002f62:	7d3b      	ldrb	r3, [r7, #20]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff55 	bl	8002e14 <BCD2Decimal>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	b25a      	sxtb	r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	711a      	strb	r2, [r3, #4]
	dt -> month = BCD2Decimal (buff[5]);
 8002f72:	7d7b      	ldrb	r3, [r7, #21]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff4d 	bl	8002e14 <BCD2Decimal>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	715a      	strb	r2, [r3, #5]
	dt -> year = BCD2Decimal (buff[6]);
 8002f82:	7dbb      	ldrb	r3, [r7, #22]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff45 	bl	8002e14 <BCD2Decimal>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	b25a      	sxtb	r2, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	719a      	strb	r2, [r3, #6]

}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <RTC_READ_DAY_OF_WEEK>:
uint8_t RTC_READ_DAY_OF_WEEK(Datetime *dt)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	uint16_t d = dt->date;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002faa:	81bb      	strh	r3, [r7, #12]
	uint16_t m = dt->month;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002fb2:	817b      	strh	r3, [r7, #10]
	uint16_t y = 2000+ dt->year;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002fc0:	81fb      	strh	r3, [r7, #14]
	uint8_t weekday = (d += m < 3 ? y-- : y - 2, 23*m/9 + d + 4 + y/4- y/100 + y/400)%7;
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d803      	bhi.n	8002fd0 <RTC_READ_DAY_OF_WEEK+0x34>
 8002fc8:	89fb      	ldrh	r3, [r7, #14]
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	81fa      	strh	r2, [r7, #14]
 8002fce:	e001      	b.n	8002fd4 <RTC_READ_DAY_OF_WEEK+0x38>
 8002fd0:	89fb      	ldrh	r3, [r7, #14]
 8002fd2:	3b02      	subs	r3, #2
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	89bb      	ldrh	r3, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	81bb      	strh	r3, [r7, #12]
 8002fdc:	897a      	ldrh	r2, [r7, #10]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	4a16      	ldr	r2, [pc, #88]	; (8003044 <RTC_READ_DAY_OF_WEEK+0xa8>)
 8002fea:	fb82 1203 	smull	r1, r2, r2, r3
 8002fee:	1052      	asrs	r2, r2, #1
 8002ff0:	17db      	asrs	r3, r3, #31
 8002ff2:	1ad2      	subs	r2, r2, r3
 8002ff4:	89bb      	ldrh	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	89fa      	ldrh	r2, [r7, #14]
 8002ffc:	0892      	lsrs	r2, r2, #2
 8002ffe:	b292      	uxth	r2, r2
 8003000:	4413      	add	r3, r2
 8003002:	89fa      	ldrh	r2, [r7, #14]
 8003004:	4910      	ldr	r1, [pc, #64]	; (8003048 <RTC_READ_DAY_OF_WEEK+0xac>)
 8003006:	fba1 1202 	umull	r1, r2, r1, r2
 800300a:	0952      	lsrs	r2, r2, #5
 800300c:	b292      	uxth	r2, r2
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	89fa      	ldrh	r2, [r7, #14]
 8003012:	490d      	ldr	r1, [pc, #52]	; (8003048 <RTC_READ_DAY_OF_WEEK+0xac>)
 8003014:	fba1 1202 	umull	r1, r2, r1, r2
 8003018:	09d2      	lsrs	r2, r2, #7
 800301a:	b292      	uxth	r2, r2
 800301c:	441a      	add	r2, r3
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <RTC_READ_DAY_OF_WEEK+0xb0>)
 8003020:	fb83 1302 	smull	r1, r3, r3, r2
 8003024:	4413      	add	r3, r2
 8003026:	1099      	asrs	r1, r3, #2
 8003028:	17d3      	asrs	r3, r2, #31
 800302a:	1ac9      	subs	r1, r1, r3
 800302c:	460b      	mov	r3, r1
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	1a5b      	subs	r3, r3, r1
 8003032:	1ad1      	subs	r1, r2, r3
 8003034:	460b      	mov	r3, r1
 8003036:	727b      	strb	r3, [r7, #9]
	return weekday;
 8003038:	7a7b      	ldrb	r3, [r7, #9]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	38e38e39 	.word	0x38e38e39
 8003048:	51eb851f 	.word	0x51eb851f
 800304c:	92492493 	.word	0x92492493

08003050 <RTC_Init>:
void RTC_Init(RTC_typedef *rtc ,I2C_HandleTypeDef *_rtc_i2c)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
	rtc -> rtc_i2c = _rtc_i2c;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	601a      	str	r2, [r3, #0]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <btn_release_callback>:
{

}

__weak  void btn_release_callback(Button_Typdef *ButtonX)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]

}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <button_handle>:

}


 void button_handle(Button_Typdef *ButtonX)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	// loc nhieu
	uint8_t sta= HAL_GPIO_ReadPin(ButtonX -> GPIOx, ButtonX -> GPIO_Pin);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8a9b      	ldrh	r3, [r3, #20]
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fe f8fa 	bl	8001288 <HAL_GPIO_ReadPin>
 8003094:	4603      	mov	r3, r0
 8003096:	73fb      	strb	r3, [r7, #15]

	if(sta != ButtonX -> btn_filter)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	789b      	ldrb	r3, [r3, #2]
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d00a      	beq.n	80030b8 <button_handle+0x3c>
	{
		ButtonX -> btn_filter = sta;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	709a      	strb	r2, [r3, #2]
		ButtonX -> is_debouncing =1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	70da      	strb	r2, [r3, #3]
		ButtonX -> time_deboune = HAL_GetTick();
 80030ae:	f7fd fe55 	bl	8000d5c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	605a      	str	r2, [r3, #4]
	}
	//xac lap
	if(ButtonX ->is_debouncing && ( HAL_GetTick() -ButtonX -> time_deboune >=15 ))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	78db      	ldrb	r3, [r3, #3]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <button_handle+0x62>
 80030c0:	f7fd fe4c 	bl	8000d5c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b0e      	cmp	r3, #14
 80030ce:	d906      	bls.n	80030de <button_handle+0x62>
	{
		ButtonX -> btn_current = ButtonX -> btn_filter;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	789a      	ldrb	r2, [r3, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	701a      	strb	r2, [r3, #0]
		ButtonX -> is_debouncing =0;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	70da      	strb	r2, [r3, #3]
	}
	// xu ly
	if(ButtonX -> btn_current !=ButtonX -> btn_last)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	781a      	ldrb	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	785b      	ldrb	r3, [r3, #1]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d025      	beq.n	8003136 <button_handle+0xba>
	{
		if(ButtonX -> btn_current ==0)// nhan xuong
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <button_handle+0x8e>
		{
			ButtonX -> is_press_timeout =1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	731a      	strb	r2, [r3, #12]
			btn_pressing_callback(ButtonX);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7fd fa99 	bl	8000630 <btn_pressing_callback>
			ButtonX -> time_start_press = HAL_GetTick();
 80030fe:	f7fd fe2d 	bl	8000d5c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	e011      	b.n	800312e <button_handle+0xb2>
		}
		else // nha nut
				{
			if(HAL_GetTick() -ButtonX -> time_start_press <= 1000)
 800310a:	f7fd fe27 	bl	8000d5c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800311a:	d802      	bhi.n	8003122 <button_handle+0xa6>
			{
				btn_press_short_callback(ButtonX);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fd faa3 	bl	8000668 <btn_press_short_callback>
			}
								btn_release_callback(ButtonX);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ffa1 	bl	800306a <btn_release_callback>
								ButtonX -> is_press_timeout =0;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	731a      	strb	r2, [r3, #12]
				}
		ButtonX -> btn_last = ButtonX ->btn_current;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	705a      	strb	r2, [r3, #1]
	}
// nhan giu
	if(ButtonX -> is_press_timeout && (HAL_GetTick() - ButtonX -> time_start_press >= 3000))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	7b1b      	ldrb	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00f      	beq.n	800315e <button_handle+0xe2>
 800313e:	f7fd fe0d 	bl	8000d5c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800314e:	4293      	cmp	r3, r2
 8003150:	d905      	bls.n	800315e <button_handle+0xe2>
	{
		btn_press_timeout_callback(ButtonX);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fad4 	bl	8000700 <btn_press_timeout_callback>
		ButtonX -> is_press_timeout =0;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	731a      	strb	r2, [r3, #12]
	}
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <button_init>:

void button_init(Button_Typdef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	4613      	mov	r3, r2
 8003172:	80fb      	strh	r3, [r7, #6]
	ButtonX->btn_current =1;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
	ButtonX ->btn_filter = 1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	709a      	strb	r2, [r3, #2]
	ButtonX ->btn_last = 1;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	705a      	strb	r2, [r3, #1]
	ButtonX ->GPIOx = GPIOx;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	611a      	str	r2, [r3, #16]
	ButtonX ->GPIO_Pin = GPIO_Pin;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	829a      	strh	r2, [r3, #20]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <siprintf>:
 800319c:	b40e      	push	{r1, r2, r3}
 800319e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031a2:	b500      	push	{lr}
 80031a4:	b09c      	sub	sp, #112	; 0x70
 80031a6:	ab1d      	add	r3, sp, #116	; 0x74
 80031a8:	9002      	str	r0, [sp, #8]
 80031aa:	9006      	str	r0, [sp, #24]
 80031ac:	9107      	str	r1, [sp, #28]
 80031ae:	9104      	str	r1, [sp, #16]
 80031b0:	4808      	ldr	r0, [pc, #32]	; (80031d4 <siprintf+0x38>)
 80031b2:	4909      	ldr	r1, [pc, #36]	; (80031d8 <siprintf+0x3c>)
 80031b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80031b8:	9105      	str	r1, [sp, #20]
 80031ba:	6800      	ldr	r0, [r0, #0]
 80031bc:	a902      	add	r1, sp, #8
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	f000 f9ae 	bl	8003520 <_svfiprintf_r>
 80031c4:	2200      	movs	r2, #0
 80031c6:	9b02      	ldr	r3, [sp, #8]
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	b01c      	add	sp, #112	; 0x70
 80031cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80031d0:	b003      	add	sp, #12
 80031d2:	4770      	bx	lr
 80031d4:	2000005c 	.word	0x2000005c
 80031d8:	ffff0208 	.word	0xffff0208

080031dc <_vsiprintf_r>:
 80031dc:	b500      	push	{lr}
 80031de:	b09b      	sub	sp, #108	; 0x6c
 80031e0:	9100      	str	r1, [sp, #0]
 80031e2:	9104      	str	r1, [sp, #16]
 80031e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031e8:	9105      	str	r1, [sp, #20]
 80031ea:	9102      	str	r1, [sp, #8]
 80031ec:	4905      	ldr	r1, [pc, #20]	; (8003204 <_vsiprintf_r+0x28>)
 80031ee:	9103      	str	r1, [sp, #12]
 80031f0:	4669      	mov	r1, sp
 80031f2:	f000 f995 	bl	8003520 <_svfiprintf_r>
 80031f6:	2200      	movs	r2, #0
 80031f8:	9b00      	ldr	r3, [sp, #0]
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	b01b      	add	sp, #108	; 0x6c
 80031fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003202:	bf00      	nop
 8003204:	ffff0208 	.word	0xffff0208

08003208 <vsiprintf>:
 8003208:	4613      	mov	r3, r2
 800320a:	460a      	mov	r2, r1
 800320c:	4601      	mov	r1, r0
 800320e:	4802      	ldr	r0, [pc, #8]	; (8003218 <vsiprintf+0x10>)
 8003210:	6800      	ldr	r0, [r0, #0]
 8003212:	f7ff bfe3 	b.w	80031dc <_vsiprintf_r>
 8003216:	bf00      	nop
 8003218:	2000005c 	.word	0x2000005c

0800321c <memset>:
 800321c:	4603      	mov	r3, r0
 800321e:	4402      	add	r2, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <__errno>:
 800322c:	4b01      	ldr	r3, [pc, #4]	; (8003234 <__errno+0x8>)
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	2000005c 	.word	0x2000005c

08003238 <__libc_init_array>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	2600      	movs	r6, #0
 800323c:	4d0c      	ldr	r5, [pc, #48]	; (8003270 <__libc_init_array+0x38>)
 800323e:	4c0d      	ldr	r4, [pc, #52]	; (8003274 <__libc_init_array+0x3c>)
 8003240:	1b64      	subs	r4, r4, r5
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	42a6      	cmp	r6, r4
 8003246:	d109      	bne.n	800325c <__libc_init_array+0x24>
 8003248:	f000 fc7a 	bl	8003b40 <_init>
 800324c:	2600      	movs	r6, #0
 800324e:	4d0a      	ldr	r5, [pc, #40]	; (8003278 <__libc_init_array+0x40>)
 8003250:	4c0a      	ldr	r4, [pc, #40]	; (800327c <__libc_init_array+0x44>)
 8003252:	1b64      	subs	r4, r4, r5
 8003254:	10a4      	asrs	r4, r4, #2
 8003256:	42a6      	cmp	r6, r4
 8003258:	d105      	bne.n	8003266 <__libc_init_array+0x2e>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003260:	4798      	blx	r3
 8003262:	3601      	adds	r6, #1
 8003264:	e7ee      	b.n	8003244 <__libc_init_array+0xc>
 8003266:	f855 3b04 	ldr.w	r3, [r5], #4
 800326a:	4798      	blx	r3
 800326c:	3601      	adds	r6, #1
 800326e:	e7f2      	b.n	8003256 <__libc_init_array+0x1e>
 8003270:	08003c14 	.word	0x08003c14
 8003274:	08003c14 	.word	0x08003c14
 8003278:	08003c14 	.word	0x08003c14
 800327c:	08003c18 	.word	0x08003c18

08003280 <__retarget_lock_acquire_recursive>:
 8003280:	4770      	bx	lr

08003282 <__retarget_lock_release_recursive>:
 8003282:	4770      	bx	lr

08003284 <_free_r>:
 8003284:	b538      	push	{r3, r4, r5, lr}
 8003286:	4605      	mov	r5, r0
 8003288:	2900      	cmp	r1, #0
 800328a:	d040      	beq.n	800330e <_free_r+0x8a>
 800328c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003290:	1f0c      	subs	r4, r1, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	bfb8      	it	lt
 8003296:	18e4      	addlt	r4, r4, r3
 8003298:	f000 f8dc 	bl	8003454 <__malloc_lock>
 800329c:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <_free_r+0x8c>)
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	b933      	cbnz	r3, 80032b0 <_free_r+0x2c>
 80032a2:	6063      	str	r3, [r4, #4]
 80032a4:	6014      	str	r4, [r2, #0]
 80032a6:	4628      	mov	r0, r5
 80032a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ac:	f000 b8d8 	b.w	8003460 <__malloc_unlock>
 80032b0:	42a3      	cmp	r3, r4
 80032b2:	d908      	bls.n	80032c6 <_free_r+0x42>
 80032b4:	6820      	ldr	r0, [r4, #0]
 80032b6:	1821      	adds	r1, r4, r0
 80032b8:	428b      	cmp	r3, r1
 80032ba:	bf01      	itttt	eq
 80032bc:	6819      	ldreq	r1, [r3, #0]
 80032be:	685b      	ldreq	r3, [r3, #4]
 80032c0:	1809      	addeq	r1, r1, r0
 80032c2:	6021      	streq	r1, [r4, #0]
 80032c4:	e7ed      	b.n	80032a2 <_free_r+0x1e>
 80032c6:	461a      	mov	r2, r3
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	b10b      	cbz	r3, 80032d0 <_free_r+0x4c>
 80032cc:	42a3      	cmp	r3, r4
 80032ce:	d9fa      	bls.n	80032c6 <_free_r+0x42>
 80032d0:	6811      	ldr	r1, [r2, #0]
 80032d2:	1850      	adds	r0, r2, r1
 80032d4:	42a0      	cmp	r0, r4
 80032d6:	d10b      	bne.n	80032f0 <_free_r+0x6c>
 80032d8:	6820      	ldr	r0, [r4, #0]
 80032da:	4401      	add	r1, r0
 80032dc:	1850      	adds	r0, r2, r1
 80032de:	4283      	cmp	r3, r0
 80032e0:	6011      	str	r1, [r2, #0]
 80032e2:	d1e0      	bne.n	80032a6 <_free_r+0x22>
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4408      	add	r0, r1
 80032ea:	6010      	str	r0, [r2, #0]
 80032ec:	6053      	str	r3, [r2, #4]
 80032ee:	e7da      	b.n	80032a6 <_free_r+0x22>
 80032f0:	d902      	bls.n	80032f8 <_free_r+0x74>
 80032f2:	230c      	movs	r3, #12
 80032f4:	602b      	str	r3, [r5, #0]
 80032f6:	e7d6      	b.n	80032a6 <_free_r+0x22>
 80032f8:	6820      	ldr	r0, [r4, #0]
 80032fa:	1821      	adds	r1, r4, r0
 80032fc:	428b      	cmp	r3, r1
 80032fe:	bf01      	itttt	eq
 8003300:	6819      	ldreq	r1, [r3, #0]
 8003302:	685b      	ldreq	r3, [r3, #4]
 8003304:	1809      	addeq	r1, r1, r0
 8003306:	6021      	streq	r1, [r4, #0]
 8003308:	6063      	str	r3, [r4, #4]
 800330a:	6054      	str	r4, [r2, #4]
 800330c:	e7cb      	b.n	80032a6 <_free_r+0x22>
 800330e:	bd38      	pop	{r3, r4, r5, pc}
 8003310:	20000288 	.word	0x20000288

08003314 <sbrk_aligned>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	4e0e      	ldr	r6, [pc, #56]	; (8003350 <sbrk_aligned+0x3c>)
 8003318:	460c      	mov	r4, r1
 800331a:	6831      	ldr	r1, [r6, #0]
 800331c:	4605      	mov	r5, r0
 800331e:	b911      	cbnz	r1, 8003326 <sbrk_aligned+0x12>
 8003320:	f000 fbaa 	bl	8003a78 <_sbrk_r>
 8003324:	6030      	str	r0, [r6, #0]
 8003326:	4621      	mov	r1, r4
 8003328:	4628      	mov	r0, r5
 800332a:	f000 fba5 	bl	8003a78 <_sbrk_r>
 800332e:	1c43      	adds	r3, r0, #1
 8003330:	d00a      	beq.n	8003348 <sbrk_aligned+0x34>
 8003332:	1cc4      	adds	r4, r0, #3
 8003334:	f024 0403 	bic.w	r4, r4, #3
 8003338:	42a0      	cmp	r0, r4
 800333a:	d007      	beq.n	800334c <sbrk_aligned+0x38>
 800333c:	1a21      	subs	r1, r4, r0
 800333e:	4628      	mov	r0, r5
 8003340:	f000 fb9a 	bl	8003a78 <_sbrk_r>
 8003344:	3001      	adds	r0, #1
 8003346:	d101      	bne.n	800334c <sbrk_aligned+0x38>
 8003348:	f04f 34ff 	mov.w	r4, #4294967295
 800334c:	4620      	mov	r0, r4
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	2000028c 	.word	0x2000028c

08003354 <_malloc_r>:
 8003354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003358:	1ccd      	adds	r5, r1, #3
 800335a:	f025 0503 	bic.w	r5, r5, #3
 800335e:	3508      	adds	r5, #8
 8003360:	2d0c      	cmp	r5, #12
 8003362:	bf38      	it	cc
 8003364:	250c      	movcc	r5, #12
 8003366:	2d00      	cmp	r5, #0
 8003368:	4607      	mov	r7, r0
 800336a:	db01      	blt.n	8003370 <_malloc_r+0x1c>
 800336c:	42a9      	cmp	r1, r5
 800336e:	d905      	bls.n	800337c <_malloc_r+0x28>
 8003370:	230c      	movs	r3, #12
 8003372:	2600      	movs	r6, #0
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4630      	mov	r0, r6
 8003378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800337c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003450 <_malloc_r+0xfc>
 8003380:	f000 f868 	bl	8003454 <__malloc_lock>
 8003384:	f8d8 3000 	ldr.w	r3, [r8]
 8003388:	461c      	mov	r4, r3
 800338a:	bb5c      	cbnz	r4, 80033e4 <_malloc_r+0x90>
 800338c:	4629      	mov	r1, r5
 800338e:	4638      	mov	r0, r7
 8003390:	f7ff ffc0 	bl	8003314 <sbrk_aligned>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	4604      	mov	r4, r0
 8003398:	d155      	bne.n	8003446 <_malloc_r+0xf2>
 800339a:	f8d8 4000 	ldr.w	r4, [r8]
 800339e:	4626      	mov	r6, r4
 80033a0:	2e00      	cmp	r6, #0
 80033a2:	d145      	bne.n	8003430 <_malloc_r+0xdc>
 80033a4:	2c00      	cmp	r4, #0
 80033a6:	d048      	beq.n	800343a <_malloc_r+0xe6>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	4631      	mov	r1, r6
 80033ac:	4638      	mov	r0, r7
 80033ae:	eb04 0903 	add.w	r9, r4, r3
 80033b2:	f000 fb61 	bl	8003a78 <_sbrk_r>
 80033b6:	4581      	cmp	r9, r0
 80033b8:	d13f      	bne.n	800343a <_malloc_r+0xe6>
 80033ba:	6821      	ldr	r1, [r4, #0]
 80033bc:	4638      	mov	r0, r7
 80033be:	1a6d      	subs	r5, r5, r1
 80033c0:	4629      	mov	r1, r5
 80033c2:	f7ff ffa7 	bl	8003314 <sbrk_aligned>
 80033c6:	3001      	adds	r0, #1
 80033c8:	d037      	beq.n	800343a <_malloc_r+0xe6>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	442b      	add	r3, r5
 80033ce:	6023      	str	r3, [r4, #0]
 80033d0:	f8d8 3000 	ldr.w	r3, [r8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d038      	beq.n	800344a <_malloc_r+0xf6>
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	42a2      	cmp	r2, r4
 80033dc:	d12b      	bne.n	8003436 <_malloc_r+0xe2>
 80033de:	2200      	movs	r2, #0
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	e00f      	b.n	8003404 <_malloc_r+0xb0>
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	1b52      	subs	r2, r2, r5
 80033e8:	d41f      	bmi.n	800342a <_malloc_r+0xd6>
 80033ea:	2a0b      	cmp	r2, #11
 80033ec:	d917      	bls.n	800341e <_malloc_r+0xca>
 80033ee:	1961      	adds	r1, r4, r5
 80033f0:	42a3      	cmp	r3, r4
 80033f2:	6025      	str	r5, [r4, #0]
 80033f4:	bf18      	it	ne
 80033f6:	6059      	strne	r1, [r3, #4]
 80033f8:	6863      	ldr	r3, [r4, #4]
 80033fa:	bf08      	it	eq
 80033fc:	f8c8 1000 	streq.w	r1, [r8]
 8003400:	5162      	str	r2, [r4, r5]
 8003402:	604b      	str	r3, [r1, #4]
 8003404:	4638      	mov	r0, r7
 8003406:	f104 060b 	add.w	r6, r4, #11
 800340a:	f000 f829 	bl	8003460 <__malloc_unlock>
 800340e:	f026 0607 	bic.w	r6, r6, #7
 8003412:	1d23      	adds	r3, r4, #4
 8003414:	1af2      	subs	r2, r6, r3
 8003416:	d0ae      	beq.n	8003376 <_malloc_r+0x22>
 8003418:	1b9b      	subs	r3, r3, r6
 800341a:	50a3      	str	r3, [r4, r2]
 800341c:	e7ab      	b.n	8003376 <_malloc_r+0x22>
 800341e:	42a3      	cmp	r3, r4
 8003420:	6862      	ldr	r2, [r4, #4]
 8003422:	d1dd      	bne.n	80033e0 <_malloc_r+0x8c>
 8003424:	f8c8 2000 	str.w	r2, [r8]
 8003428:	e7ec      	b.n	8003404 <_malloc_r+0xb0>
 800342a:	4623      	mov	r3, r4
 800342c:	6864      	ldr	r4, [r4, #4]
 800342e:	e7ac      	b.n	800338a <_malloc_r+0x36>
 8003430:	4634      	mov	r4, r6
 8003432:	6876      	ldr	r6, [r6, #4]
 8003434:	e7b4      	b.n	80033a0 <_malloc_r+0x4c>
 8003436:	4613      	mov	r3, r2
 8003438:	e7cc      	b.n	80033d4 <_malloc_r+0x80>
 800343a:	230c      	movs	r3, #12
 800343c:	4638      	mov	r0, r7
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	f000 f80e 	bl	8003460 <__malloc_unlock>
 8003444:	e797      	b.n	8003376 <_malloc_r+0x22>
 8003446:	6025      	str	r5, [r4, #0]
 8003448:	e7dc      	b.n	8003404 <_malloc_r+0xb0>
 800344a:	605b      	str	r3, [r3, #4]
 800344c:	deff      	udf	#255	; 0xff
 800344e:	bf00      	nop
 8003450:	20000288 	.word	0x20000288

08003454 <__malloc_lock>:
 8003454:	4801      	ldr	r0, [pc, #4]	; (800345c <__malloc_lock+0x8>)
 8003456:	f7ff bf13 	b.w	8003280 <__retarget_lock_acquire_recursive>
 800345a:	bf00      	nop
 800345c:	20000284 	.word	0x20000284

08003460 <__malloc_unlock>:
 8003460:	4801      	ldr	r0, [pc, #4]	; (8003468 <__malloc_unlock+0x8>)
 8003462:	f7ff bf0e 	b.w	8003282 <__retarget_lock_release_recursive>
 8003466:	bf00      	nop
 8003468:	20000284 	.word	0x20000284

0800346c <__ssputs_r>:
 800346c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003470:	461f      	mov	r7, r3
 8003472:	688e      	ldr	r6, [r1, #8]
 8003474:	4682      	mov	sl, r0
 8003476:	42be      	cmp	r6, r7
 8003478:	460c      	mov	r4, r1
 800347a:	4690      	mov	r8, r2
 800347c:	680b      	ldr	r3, [r1, #0]
 800347e:	d82c      	bhi.n	80034da <__ssputs_r+0x6e>
 8003480:	898a      	ldrh	r2, [r1, #12]
 8003482:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003486:	d026      	beq.n	80034d6 <__ssputs_r+0x6a>
 8003488:	6965      	ldr	r5, [r4, #20]
 800348a:	6909      	ldr	r1, [r1, #16]
 800348c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003490:	eba3 0901 	sub.w	r9, r3, r1
 8003494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003498:	1c7b      	adds	r3, r7, #1
 800349a:	444b      	add	r3, r9
 800349c:	106d      	asrs	r5, r5, #1
 800349e:	429d      	cmp	r5, r3
 80034a0:	bf38      	it	cc
 80034a2:	461d      	movcc	r5, r3
 80034a4:	0553      	lsls	r3, r2, #21
 80034a6:	d527      	bpl.n	80034f8 <__ssputs_r+0x8c>
 80034a8:	4629      	mov	r1, r5
 80034aa:	f7ff ff53 	bl	8003354 <_malloc_r>
 80034ae:	4606      	mov	r6, r0
 80034b0:	b360      	cbz	r0, 800350c <__ssputs_r+0xa0>
 80034b2:	464a      	mov	r2, r9
 80034b4:	6921      	ldr	r1, [r4, #16]
 80034b6:	f000 fafd 	bl	8003ab4 <memcpy>
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c4:	81a3      	strh	r3, [r4, #12]
 80034c6:	6126      	str	r6, [r4, #16]
 80034c8:	444e      	add	r6, r9
 80034ca:	6026      	str	r6, [r4, #0]
 80034cc:	463e      	mov	r6, r7
 80034ce:	6165      	str	r5, [r4, #20]
 80034d0:	eba5 0509 	sub.w	r5, r5, r9
 80034d4:	60a5      	str	r5, [r4, #8]
 80034d6:	42be      	cmp	r6, r7
 80034d8:	d900      	bls.n	80034dc <__ssputs_r+0x70>
 80034da:	463e      	mov	r6, r7
 80034dc:	4632      	mov	r2, r6
 80034de:	4641      	mov	r1, r8
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	f000 faaf 	bl	8003a44 <memmove>
 80034e6:	2000      	movs	r0, #0
 80034e8:	68a3      	ldr	r3, [r4, #8]
 80034ea:	1b9b      	subs	r3, r3, r6
 80034ec:	60a3      	str	r3, [r4, #8]
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	4433      	add	r3, r6
 80034f2:	6023      	str	r3, [r4, #0]
 80034f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f8:	462a      	mov	r2, r5
 80034fa:	f000 fae9 	bl	8003ad0 <_realloc_r>
 80034fe:	4606      	mov	r6, r0
 8003500:	2800      	cmp	r0, #0
 8003502:	d1e0      	bne.n	80034c6 <__ssputs_r+0x5a>
 8003504:	4650      	mov	r0, sl
 8003506:	6921      	ldr	r1, [r4, #16]
 8003508:	f7ff febc 	bl	8003284 <_free_r>
 800350c:	230c      	movs	r3, #12
 800350e:	f8ca 3000 	str.w	r3, [sl]
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	e7e9      	b.n	80034f4 <__ssputs_r+0x88>

08003520 <_svfiprintf_r>:
 8003520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003524:	4698      	mov	r8, r3
 8003526:	898b      	ldrh	r3, [r1, #12]
 8003528:	4607      	mov	r7, r0
 800352a:	061b      	lsls	r3, r3, #24
 800352c:	460d      	mov	r5, r1
 800352e:	4614      	mov	r4, r2
 8003530:	b09d      	sub	sp, #116	; 0x74
 8003532:	d50e      	bpl.n	8003552 <_svfiprintf_r+0x32>
 8003534:	690b      	ldr	r3, [r1, #16]
 8003536:	b963      	cbnz	r3, 8003552 <_svfiprintf_r+0x32>
 8003538:	2140      	movs	r1, #64	; 0x40
 800353a:	f7ff ff0b 	bl	8003354 <_malloc_r>
 800353e:	6028      	str	r0, [r5, #0]
 8003540:	6128      	str	r0, [r5, #16]
 8003542:	b920      	cbnz	r0, 800354e <_svfiprintf_r+0x2e>
 8003544:	230c      	movs	r3, #12
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	e0d0      	b.n	80036f0 <_svfiprintf_r+0x1d0>
 800354e:	2340      	movs	r3, #64	; 0x40
 8003550:	616b      	str	r3, [r5, #20]
 8003552:	2300      	movs	r3, #0
 8003554:	9309      	str	r3, [sp, #36]	; 0x24
 8003556:	2320      	movs	r3, #32
 8003558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800355c:	2330      	movs	r3, #48	; 0x30
 800355e:	f04f 0901 	mov.w	r9, #1
 8003562:	f8cd 800c 	str.w	r8, [sp, #12]
 8003566:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003708 <_svfiprintf_r+0x1e8>
 800356a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800356e:	4623      	mov	r3, r4
 8003570:	469a      	mov	sl, r3
 8003572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003576:	b10a      	cbz	r2, 800357c <_svfiprintf_r+0x5c>
 8003578:	2a25      	cmp	r2, #37	; 0x25
 800357a:	d1f9      	bne.n	8003570 <_svfiprintf_r+0x50>
 800357c:	ebba 0b04 	subs.w	fp, sl, r4
 8003580:	d00b      	beq.n	800359a <_svfiprintf_r+0x7a>
 8003582:	465b      	mov	r3, fp
 8003584:	4622      	mov	r2, r4
 8003586:	4629      	mov	r1, r5
 8003588:	4638      	mov	r0, r7
 800358a:	f7ff ff6f 	bl	800346c <__ssputs_r>
 800358e:	3001      	adds	r0, #1
 8003590:	f000 80a9 	beq.w	80036e6 <_svfiprintf_r+0x1c6>
 8003594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003596:	445a      	add	r2, fp
 8003598:	9209      	str	r2, [sp, #36]	; 0x24
 800359a:	f89a 3000 	ldrb.w	r3, [sl]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80a1 	beq.w	80036e6 <_svfiprintf_r+0x1c6>
 80035a4:	2300      	movs	r3, #0
 80035a6:	f04f 32ff 	mov.w	r2, #4294967295
 80035aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035ae:	f10a 0a01 	add.w	sl, sl, #1
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	9307      	str	r3, [sp, #28]
 80035b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035ba:	931a      	str	r3, [sp, #104]	; 0x68
 80035bc:	4654      	mov	r4, sl
 80035be:	2205      	movs	r2, #5
 80035c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035c4:	4850      	ldr	r0, [pc, #320]	; (8003708 <_svfiprintf_r+0x1e8>)
 80035c6:	f000 fa67 	bl	8003a98 <memchr>
 80035ca:	9a04      	ldr	r2, [sp, #16]
 80035cc:	b9d8      	cbnz	r0, 8003606 <_svfiprintf_r+0xe6>
 80035ce:	06d0      	lsls	r0, r2, #27
 80035d0:	bf44      	itt	mi
 80035d2:	2320      	movmi	r3, #32
 80035d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035d8:	0711      	lsls	r1, r2, #28
 80035da:	bf44      	itt	mi
 80035dc:	232b      	movmi	r3, #43	; 0x2b
 80035de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035e2:	f89a 3000 	ldrb.w	r3, [sl]
 80035e6:	2b2a      	cmp	r3, #42	; 0x2a
 80035e8:	d015      	beq.n	8003616 <_svfiprintf_r+0xf6>
 80035ea:	4654      	mov	r4, sl
 80035ec:	2000      	movs	r0, #0
 80035ee:	f04f 0c0a 	mov.w	ip, #10
 80035f2:	9a07      	ldr	r2, [sp, #28]
 80035f4:	4621      	mov	r1, r4
 80035f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035fa:	3b30      	subs	r3, #48	; 0x30
 80035fc:	2b09      	cmp	r3, #9
 80035fe:	d94d      	bls.n	800369c <_svfiprintf_r+0x17c>
 8003600:	b1b0      	cbz	r0, 8003630 <_svfiprintf_r+0x110>
 8003602:	9207      	str	r2, [sp, #28]
 8003604:	e014      	b.n	8003630 <_svfiprintf_r+0x110>
 8003606:	eba0 0308 	sub.w	r3, r0, r8
 800360a:	fa09 f303 	lsl.w	r3, r9, r3
 800360e:	4313      	orrs	r3, r2
 8003610:	46a2      	mov	sl, r4
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	e7d2      	b.n	80035bc <_svfiprintf_r+0x9c>
 8003616:	9b03      	ldr	r3, [sp, #12]
 8003618:	1d19      	adds	r1, r3, #4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	9103      	str	r1, [sp, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	bfbb      	ittet	lt
 8003622:	425b      	neglt	r3, r3
 8003624:	f042 0202 	orrlt.w	r2, r2, #2
 8003628:	9307      	strge	r3, [sp, #28]
 800362a:	9307      	strlt	r3, [sp, #28]
 800362c:	bfb8      	it	lt
 800362e:	9204      	strlt	r2, [sp, #16]
 8003630:	7823      	ldrb	r3, [r4, #0]
 8003632:	2b2e      	cmp	r3, #46	; 0x2e
 8003634:	d10c      	bne.n	8003650 <_svfiprintf_r+0x130>
 8003636:	7863      	ldrb	r3, [r4, #1]
 8003638:	2b2a      	cmp	r3, #42	; 0x2a
 800363a:	d134      	bne.n	80036a6 <_svfiprintf_r+0x186>
 800363c:	9b03      	ldr	r3, [sp, #12]
 800363e:	3402      	adds	r4, #2
 8003640:	1d1a      	adds	r2, r3, #4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	9203      	str	r2, [sp, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	bfb8      	it	lt
 800364a:	f04f 33ff 	movlt.w	r3, #4294967295
 800364e:	9305      	str	r3, [sp, #20]
 8003650:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800370c <_svfiprintf_r+0x1ec>
 8003654:	2203      	movs	r2, #3
 8003656:	4650      	mov	r0, sl
 8003658:	7821      	ldrb	r1, [r4, #0]
 800365a:	f000 fa1d 	bl	8003a98 <memchr>
 800365e:	b138      	cbz	r0, 8003670 <_svfiprintf_r+0x150>
 8003660:	2240      	movs	r2, #64	; 0x40
 8003662:	9b04      	ldr	r3, [sp, #16]
 8003664:	eba0 000a 	sub.w	r0, r0, sl
 8003668:	4082      	lsls	r2, r0
 800366a:	4313      	orrs	r3, r2
 800366c:	3401      	adds	r4, #1
 800366e:	9304      	str	r3, [sp, #16]
 8003670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003674:	2206      	movs	r2, #6
 8003676:	4826      	ldr	r0, [pc, #152]	; (8003710 <_svfiprintf_r+0x1f0>)
 8003678:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800367c:	f000 fa0c 	bl	8003a98 <memchr>
 8003680:	2800      	cmp	r0, #0
 8003682:	d038      	beq.n	80036f6 <_svfiprintf_r+0x1d6>
 8003684:	4b23      	ldr	r3, [pc, #140]	; (8003714 <_svfiprintf_r+0x1f4>)
 8003686:	bb1b      	cbnz	r3, 80036d0 <_svfiprintf_r+0x1b0>
 8003688:	9b03      	ldr	r3, [sp, #12]
 800368a:	3307      	adds	r3, #7
 800368c:	f023 0307 	bic.w	r3, r3, #7
 8003690:	3308      	adds	r3, #8
 8003692:	9303      	str	r3, [sp, #12]
 8003694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003696:	4433      	add	r3, r6
 8003698:	9309      	str	r3, [sp, #36]	; 0x24
 800369a:	e768      	b.n	800356e <_svfiprintf_r+0x4e>
 800369c:	460c      	mov	r4, r1
 800369e:	2001      	movs	r0, #1
 80036a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80036a4:	e7a6      	b.n	80035f4 <_svfiprintf_r+0xd4>
 80036a6:	2300      	movs	r3, #0
 80036a8:	f04f 0c0a 	mov.w	ip, #10
 80036ac:	4619      	mov	r1, r3
 80036ae:	3401      	adds	r4, #1
 80036b0:	9305      	str	r3, [sp, #20]
 80036b2:	4620      	mov	r0, r4
 80036b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036b8:	3a30      	subs	r2, #48	; 0x30
 80036ba:	2a09      	cmp	r2, #9
 80036bc:	d903      	bls.n	80036c6 <_svfiprintf_r+0x1a6>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0c6      	beq.n	8003650 <_svfiprintf_r+0x130>
 80036c2:	9105      	str	r1, [sp, #20]
 80036c4:	e7c4      	b.n	8003650 <_svfiprintf_r+0x130>
 80036c6:	4604      	mov	r4, r0
 80036c8:	2301      	movs	r3, #1
 80036ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80036ce:	e7f0      	b.n	80036b2 <_svfiprintf_r+0x192>
 80036d0:	ab03      	add	r3, sp, #12
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	462a      	mov	r2, r5
 80036d6:	4638      	mov	r0, r7
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <_svfiprintf_r+0x1f8>)
 80036da:	a904      	add	r1, sp, #16
 80036dc:	f3af 8000 	nop.w
 80036e0:	1c42      	adds	r2, r0, #1
 80036e2:	4606      	mov	r6, r0
 80036e4:	d1d6      	bne.n	8003694 <_svfiprintf_r+0x174>
 80036e6:	89ab      	ldrh	r3, [r5, #12]
 80036e8:	065b      	lsls	r3, r3, #25
 80036ea:	f53f af2d 	bmi.w	8003548 <_svfiprintf_r+0x28>
 80036ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036f0:	b01d      	add	sp, #116	; 0x74
 80036f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f6:	ab03      	add	r3, sp, #12
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	462a      	mov	r2, r5
 80036fc:	4638      	mov	r0, r7
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <_svfiprintf_r+0x1f8>)
 8003700:	a904      	add	r1, sp, #16
 8003702:	f000 f87d 	bl	8003800 <_printf_i>
 8003706:	e7eb      	b.n	80036e0 <_svfiprintf_r+0x1c0>
 8003708:	08003bde 	.word	0x08003bde
 800370c:	08003be4 	.word	0x08003be4
 8003710:	08003be8 	.word	0x08003be8
 8003714:	00000000 	.word	0x00000000
 8003718:	0800346d 	.word	0x0800346d

0800371c <_printf_common>:
 800371c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003720:	4616      	mov	r6, r2
 8003722:	4699      	mov	r9, r3
 8003724:	688a      	ldr	r2, [r1, #8]
 8003726:	690b      	ldr	r3, [r1, #16]
 8003728:	4607      	mov	r7, r0
 800372a:	4293      	cmp	r3, r2
 800372c:	bfb8      	it	lt
 800372e:	4613      	movlt	r3, r2
 8003730:	6033      	str	r3, [r6, #0]
 8003732:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003736:	460c      	mov	r4, r1
 8003738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800373c:	b10a      	cbz	r2, 8003742 <_printf_common+0x26>
 800373e:	3301      	adds	r3, #1
 8003740:	6033      	str	r3, [r6, #0]
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	0699      	lsls	r1, r3, #26
 8003746:	bf42      	ittt	mi
 8003748:	6833      	ldrmi	r3, [r6, #0]
 800374a:	3302      	addmi	r3, #2
 800374c:	6033      	strmi	r3, [r6, #0]
 800374e:	6825      	ldr	r5, [r4, #0]
 8003750:	f015 0506 	ands.w	r5, r5, #6
 8003754:	d106      	bne.n	8003764 <_printf_common+0x48>
 8003756:	f104 0a19 	add.w	sl, r4, #25
 800375a:	68e3      	ldr	r3, [r4, #12]
 800375c:	6832      	ldr	r2, [r6, #0]
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	42ab      	cmp	r3, r5
 8003762:	dc2b      	bgt.n	80037bc <_printf_common+0xa0>
 8003764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003768:	1e13      	subs	r3, r2, #0
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	bf18      	it	ne
 800376e:	2301      	movne	r3, #1
 8003770:	0692      	lsls	r2, r2, #26
 8003772:	d430      	bmi.n	80037d6 <_printf_common+0xba>
 8003774:	4649      	mov	r1, r9
 8003776:	4638      	mov	r0, r7
 8003778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800377c:	47c0      	blx	r8
 800377e:	3001      	adds	r0, #1
 8003780:	d023      	beq.n	80037ca <_printf_common+0xae>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	6922      	ldr	r2, [r4, #16]
 8003786:	f003 0306 	and.w	r3, r3, #6
 800378a:	2b04      	cmp	r3, #4
 800378c:	bf14      	ite	ne
 800378e:	2500      	movne	r5, #0
 8003790:	6833      	ldreq	r3, [r6, #0]
 8003792:	f04f 0600 	mov.w	r6, #0
 8003796:	bf08      	it	eq
 8003798:	68e5      	ldreq	r5, [r4, #12]
 800379a:	f104 041a 	add.w	r4, r4, #26
 800379e:	bf08      	it	eq
 80037a0:	1aed      	subeq	r5, r5, r3
 80037a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037a6:	bf08      	it	eq
 80037a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037ac:	4293      	cmp	r3, r2
 80037ae:	bfc4      	itt	gt
 80037b0:	1a9b      	subgt	r3, r3, r2
 80037b2:	18ed      	addgt	r5, r5, r3
 80037b4:	42b5      	cmp	r5, r6
 80037b6:	d11a      	bne.n	80037ee <_printf_common+0xd2>
 80037b8:	2000      	movs	r0, #0
 80037ba:	e008      	b.n	80037ce <_printf_common+0xb2>
 80037bc:	2301      	movs	r3, #1
 80037be:	4652      	mov	r2, sl
 80037c0:	4649      	mov	r1, r9
 80037c2:	4638      	mov	r0, r7
 80037c4:	47c0      	blx	r8
 80037c6:	3001      	adds	r0, #1
 80037c8:	d103      	bne.n	80037d2 <_printf_common+0xb6>
 80037ca:	f04f 30ff 	mov.w	r0, #4294967295
 80037ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d2:	3501      	adds	r5, #1
 80037d4:	e7c1      	b.n	800375a <_printf_common+0x3e>
 80037d6:	2030      	movs	r0, #48	; 0x30
 80037d8:	18e1      	adds	r1, r4, r3
 80037da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037e4:	4422      	add	r2, r4
 80037e6:	3302      	adds	r3, #2
 80037e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037ec:	e7c2      	b.n	8003774 <_printf_common+0x58>
 80037ee:	2301      	movs	r3, #1
 80037f0:	4622      	mov	r2, r4
 80037f2:	4649      	mov	r1, r9
 80037f4:	4638      	mov	r0, r7
 80037f6:	47c0      	blx	r8
 80037f8:	3001      	adds	r0, #1
 80037fa:	d0e6      	beq.n	80037ca <_printf_common+0xae>
 80037fc:	3601      	adds	r6, #1
 80037fe:	e7d9      	b.n	80037b4 <_printf_common+0x98>

08003800 <_printf_i>:
 8003800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003804:	7e0f      	ldrb	r7, [r1, #24]
 8003806:	4691      	mov	r9, r2
 8003808:	2f78      	cmp	r7, #120	; 0x78
 800380a:	4680      	mov	r8, r0
 800380c:	460c      	mov	r4, r1
 800380e:	469a      	mov	sl, r3
 8003810:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003816:	d807      	bhi.n	8003828 <_printf_i+0x28>
 8003818:	2f62      	cmp	r7, #98	; 0x62
 800381a:	d80a      	bhi.n	8003832 <_printf_i+0x32>
 800381c:	2f00      	cmp	r7, #0
 800381e:	f000 80d5 	beq.w	80039cc <_printf_i+0x1cc>
 8003822:	2f58      	cmp	r7, #88	; 0x58
 8003824:	f000 80c1 	beq.w	80039aa <_printf_i+0x1aa>
 8003828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800382c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003830:	e03a      	b.n	80038a8 <_printf_i+0xa8>
 8003832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003836:	2b15      	cmp	r3, #21
 8003838:	d8f6      	bhi.n	8003828 <_printf_i+0x28>
 800383a:	a101      	add	r1, pc, #4	; (adr r1, 8003840 <_printf_i+0x40>)
 800383c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003840:	08003899 	.word	0x08003899
 8003844:	080038ad 	.word	0x080038ad
 8003848:	08003829 	.word	0x08003829
 800384c:	08003829 	.word	0x08003829
 8003850:	08003829 	.word	0x08003829
 8003854:	08003829 	.word	0x08003829
 8003858:	080038ad 	.word	0x080038ad
 800385c:	08003829 	.word	0x08003829
 8003860:	08003829 	.word	0x08003829
 8003864:	08003829 	.word	0x08003829
 8003868:	08003829 	.word	0x08003829
 800386c:	080039b3 	.word	0x080039b3
 8003870:	080038d9 	.word	0x080038d9
 8003874:	0800396d 	.word	0x0800396d
 8003878:	08003829 	.word	0x08003829
 800387c:	08003829 	.word	0x08003829
 8003880:	080039d5 	.word	0x080039d5
 8003884:	08003829 	.word	0x08003829
 8003888:	080038d9 	.word	0x080038d9
 800388c:	08003829 	.word	0x08003829
 8003890:	08003829 	.word	0x08003829
 8003894:	08003975 	.word	0x08003975
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	1d1a      	adds	r2, r3, #4
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	602a      	str	r2, [r5, #0]
 80038a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0a0      	b.n	80039ee <_printf_i+0x1ee>
 80038ac:	6820      	ldr	r0, [r4, #0]
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	0607      	lsls	r7, r0, #24
 80038b2:	f103 0104 	add.w	r1, r3, #4
 80038b6:	6029      	str	r1, [r5, #0]
 80038b8:	d501      	bpl.n	80038be <_printf_i+0xbe>
 80038ba:	681e      	ldr	r6, [r3, #0]
 80038bc:	e003      	b.n	80038c6 <_printf_i+0xc6>
 80038be:	0646      	lsls	r6, r0, #25
 80038c0:	d5fb      	bpl.n	80038ba <_printf_i+0xba>
 80038c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80038c6:	2e00      	cmp	r6, #0
 80038c8:	da03      	bge.n	80038d2 <_printf_i+0xd2>
 80038ca:	232d      	movs	r3, #45	; 0x2d
 80038cc:	4276      	negs	r6, r6
 80038ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038d2:	230a      	movs	r3, #10
 80038d4:	4859      	ldr	r0, [pc, #356]	; (8003a3c <_printf_i+0x23c>)
 80038d6:	e012      	b.n	80038fe <_printf_i+0xfe>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	6820      	ldr	r0, [r4, #0]
 80038dc:	1d19      	adds	r1, r3, #4
 80038de:	6029      	str	r1, [r5, #0]
 80038e0:	0605      	lsls	r5, r0, #24
 80038e2:	d501      	bpl.n	80038e8 <_printf_i+0xe8>
 80038e4:	681e      	ldr	r6, [r3, #0]
 80038e6:	e002      	b.n	80038ee <_printf_i+0xee>
 80038e8:	0641      	lsls	r1, r0, #25
 80038ea:	d5fb      	bpl.n	80038e4 <_printf_i+0xe4>
 80038ec:	881e      	ldrh	r6, [r3, #0]
 80038ee:	2f6f      	cmp	r7, #111	; 0x6f
 80038f0:	bf0c      	ite	eq
 80038f2:	2308      	moveq	r3, #8
 80038f4:	230a      	movne	r3, #10
 80038f6:	4851      	ldr	r0, [pc, #324]	; (8003a3c <_printf_i+0x23c>)
 80038f8:	2100      	movs	r1, #0
 80038fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038fe:	6865      	ldr	r5, [r4, #4]
 8003900:	2d00      	cmp	r5, #0
 8003902:	bfa8      	it	ge
 8003904:	6821      	ldrge	r1, [r4, #0]
 8003906:	60a5      	str	r5, [r4, #8]
 8003908:	bfa4      	itt	ge
 800390a:	f021 0104 	bicge.w	r1, r1, #4
 800390e:	6021      	strge	r1, [r4, #0]
 8003910:	b90e      	cbnz	r6, 8003916 <_printf_i+0x116>
 8003912:	2d00      	cmp	r5, #0
 8003914:	d04b      	beq.n	80039ae <_printf_i+0x1ae>
 8003916:	4615      	mov	r5, r2
 8003918:	fbb6 f1f3 	udiv	r1, r6, r3
 800391c:	fb03 6711 	mls	r7, r3, r1, r6
 8003920:	5dc7      	ldrb	r7, [r0, r7]
 8003922:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003926:	4637      	mov	r7, r6
 8003928:	42bb      	cmp	r3, r7
 800392a:	460e      	mov	r6, r1
 800392c:	d9f4      	bls.n	8003918 <_printf_i+0x118>
 800392e:	2b08      	cmp	r3, #8
 8003930:	d10b      	bne.n	800394a <_printf_i+0x14a>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	07de      	lsls	r6, r3, #31
 8003936:	d508      	bpl.n	800394a <_printf_i+0x14a>
 8003938:	6923      	ldr	r3, [r4, #16]
 800393a:	6861      	ldr	r1, [r4, #4]
 800393c:	4299      	cmp	r1, r3
 800393e:	bfde      	ittt	le
 8003940:	2330      	movle	r3, #48	; 0x30
 8003942:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003946:	f105 35ff 	addle.w	r5, r5, #4294967295
 800394a:	1b52      	subs	r2, r2, r5
 800394c:	6122      	str	r2, [r4, #16]
 800394e:	464b      	mov	r3, r9
 8003950:	4621      	mov	r1, r4
 8003952:	4640      	mov	r0, r8
 8003954:	f8cd a000 	str.w	sl, [sp]
 8003958:	aa03      	add	r2, sp, #12
 800395a:	f7ff fedf 	bl	800371c <_printf_common>
 800395e:	3001      	adds	r0, #1
 8003960:	d14a      	bne.n	80039f8 <_printf_i+0x1f8>
 8003962:	f04f 30ff 	mov.w	r0, #4294967295
 8003966:	b004      	add	sp, #16
 8003968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	f043 0320 	orr.w	r3, r3, #32
 8003972:	6023      	str	r3, [r4, #0]
 8003974:	2778      	movs	r7, #120	; 0x78
 8003976:	4832      	ldr	r0, [pc, #200]	; (8003a40 <_printf_i+0x240>)
 8003978:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	6829      	ldr	r1, [r5, #0]
 8003980:	061f      	lsls	r7, r3, #24
 8003982:	f851 6b04 	ldr.w	r6, [r1], #4
 8003986:	d402      	bmi.n	800398e <_printf_i+0x18e>
 8003988:	065f      	lsls	r7, r3, #25
 800398a:	bf48      	it	mi
 800398c:	b2b6      	uxthmi	r6, r6
 800398e:	07df      	lsls	r7, r3, #31
 8003990:	bf48      	it	mi
 8003992:	f043 0320 	orrmi.w	r3, r3, #32
 8003996:	6029      	str	r1, [r5, #0]
 8003998:	bf48      	it	mi
 800399a:	6023      	strmi	r3, [r4, #0]
 800399c:	b91e      	cbnz	r6, 80039a6 <_printf_i+0x1a6>
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	f023 0320 	bic.w	r3, r3, #32
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	2310      	movs	r3, #16
 80039a8:	e7a6      	b.n	80038f8 <_printf_i+0xf8>
 80039aa:	4824      	ldr	r0, [pc, #144]	; (8003a3c <_printf_i+0x23c>)
 80039ac:	e7e4      	b.n	8003978 <_printf_i+0x178>
 80039ae:	4615      	mov	r5, r2
 80039b0:	e7bd      	b.n	800392e <_printf_i+0x12e>
 80039b2:	682b      	ldr	r3, [r5, #0]
 80039b4:	6826      	ldr	r6, [r4, #0]
 80039b6:	1d18      	adds	r0, r3, #4
 80039b8:	6961      	ldr	r1, [r4, #20]
 80039ba:	6028      	str	r0, [r5, #0]
 80039bc:	0635      	lsls	r5, r6, #24
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	d501      	bpl.n	80039c6 <_printf_i+0x1c6>
 80039c2:	6019      	str	r1, [r3, #0]
 80039c4:	e002      	b.n	80039cc <_printf_i+0x1cc>
 80039c6:	0670      	lsls	r0, r6, #25
 80039c8:	d5fb      	bpl.n	80039c2 <_printf_i+0x1c2>
 80039ca:	8019      	strh	r1, [r3, #0]
 80039cc:	2300      	movs	r3, #0
 80039ce:	4615      	mov	r5, r2
 80039d0:	6123      	str	r3, [r4, #16]
 80039d2:	e7bc      	b.n	800394e <_printf_i+0x14e>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	2100      	movs	r1, #0
 80039d8:	1d1a      	adds	r2, r3, #4
 80039da:	602a      	str	r2, [r5, #0]
 80039dc:	681d      	ldr	r5, [r3, #0]
 80039de:	6862      	ldr	r2, [r4, #4]
 80039e0:	4628      	mov	r0, r5
 80039e2:	f000 f859 	bl	8003a98 <memchr>
 80039e6:	b108      	cbz	r0, 80039ec <_printf_i+0x1ec>
 80039e8:	1b40      	subs	r0, r0, r5
 80039ea:	6060      	str	r0, [r4, #4]
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	6123      	str	r3, [r4, #16]
 80039f0:	2300      	movs	r3, #0
 80039f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f6:	e7aa      	b.n	800394e <_printf_i+0x14e>
 80039f8:	462a      	mov	r2, r5
 80039fa:	4649      	mov	r1, r9
 80039fc:	4640      	mov	r0, r8
 80039fe:	6923      	ldr	r3, [r4, #16]
 8003a00:	47d0      	blx	sl
 8003a02:	3001      	adds	r0, #1
 8003a04:	d0ad      	beq.n	8003962 <_printf_i+0x162>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	079b      	lsls	r3, r3, #30
 8003a0a:	d413      	bmi.n	8003a34 <_printf_i+0x234>
 8003a0c:	68e0      	ldr	r0, [r4, #12]
 8003a0e:	9b03      	ldr	r3, [sp, #12]
 8003a10:	4298      	cmp	r0, r3
 8003a12:	bfb8      	it	lt
 8003a14:	4618      	movlt	r0, r3
 8003a16:	e7a6      	b.n	8003966 <_printf_i+0x166>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	4632      	mov	r2, r6
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	4640      	mov	r0, r8
 8003a20:	47d0      	blx	sl
 8003a22:	3001      	adds	r0, #1
 8003a24:	d09d      	beq.n	8003962 <_printf_i+0x162>
 8003a26:	3501      	adds	r5, #1
 8003a28:	68e3      	ldr	r3, [r4, #12]
 8003a2a:	9903      	ldr	r1, [sp, #12]
 8003a2c:	1a5b      	subs	r3, r3, r1
 8003a2e:	42ab      	cmp	r3, r5
 8003a30:	dcf2      	bgt.n	8003a18 <_printf_i+0x218>
 8003a32:	e7eb      	b.n	8003a0c <_printf_i+0x20c>
 8003a34:	2500      	movs	r5, #0
 8003a36:	f104 0619 	add.w	r6, r4, #25
 8003a3a:	e7f5      	b.n	8003a28 <_printf_i+0x228>
 8003a3c:	08003bef 	.word	0x08003bef
 8003a40:	08003c00 	.word	0x08003c00

08003a44 <memmove>:
 8003a44:	4288      	cmp	r0, r1
 8003a46:	b510      	push	{r4, lr}
 8003a48:	eb01 0402 	add.w	r4, r1, r2
 8003a4c:	d902      	bls.n	8003a54 <memmove+0x10>
 8003a4e:	4284      	cmp	r4, r0
 8003a50:	4623      	mov	r3, r4
 8003a52:	d807      	bhi.n	8003a64 <memmove+0x20>
 8003a54:	1e43      	subs	r3, r0, #1
 8003a56:	42a1      	cmp	r1, r4
 8003a58:	d008      	beq.n	8003a6c <memmove+0x28>
 8003a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a62:	e7f8      	b.n	8003a56 <memmove+0x12>
 8003a64:	4601      	mov	r1, r0
 8003a66:	4402      	add	r2, r0
 8003a68:	428a      	cmp	r2, r1
 8003a6a:	d100      	bne.n	8003a6e <memmove+0x2a>
 8003a6c:	bd10      	pop	{r4, pc}
 8003a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a76:	e7f7      	b.n	8003a68 <memmove+0x24>

08003a78 <_sbrk_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	4d05      	ldr	r5, [pc, #20]	; (8003a94 <_sbrk_r+0x1c>)
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	602b      	str	r3, [r5, #0]
 8003a84:	f7fd f8b0 	bl	8000be8 <_sbrk>
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d102      	bne.n	8003a92 <_sbrk_r+0x1a>
 8003a8c:	682b      	ldr	r3, [r5, #0]
 8003a8e:	b103      	cbz	r3, 8003a92 <_sbrk_r+0x1a>
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	bd38      	pop	{r3, r4, r5, pc}
 8003a94:	20000280 	.word	0x20000280

08003a98 <memchr>:
 8003a98:	4603      	mov	r3, r0
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	b2c9      	uxtb	r1, r1
 8003a9e:	4402      	add	r2, r0
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	d101      	bne.n	8003aaa <memchr+0x12>
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	e003      	b.n	8003ab2 <memchr+0x1a>
 8003aaa:	7804      	ldrb	r4, [r0, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	428c      	cmp	r4, r1
 8003ab0:	d1f6      	bne.n	8003aa0 <memchr+0x8>
 8003ab2:	bd10      	pop	{r4, pc}

08003ab4 <memcpy>:
 8003ab4:	440a      	add	r2, r1
 8003ab6:	4291      	cmp	r1, r2
 8003ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003abc:	d100      	bne.n	8003ac0 <memcpy+0xc>
 8003abe:	4770      	bx	lr
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ac6:	4291      	cmp	r1, r2
 8003ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003acc:	d1f9      	bne.n	8003ac2 <memcpy+0xe>
 8003ace:	bd10      	pop	{r4, pc}

08003ad0 <_realloc_r>:
 8003ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad4:	4680      	mov	r8, r0
 8003ad6:	4614      	mov	r4, r2
 8003ad8:	460e      	mov	r6, r1
 8003ada:	b921      	cbnz	r1, 8003ae6 <_realloc_r+0x16>
 8003adc:	4611      	mov	r1, r2
 8003ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae2:	f7ff bc37 	b.w	8003354 <_malloc_r>
 8003ae6:	b92a      	cbnz	r2, 8003af4 <_realloc_r+0x24>
 8003ae8:	f7ff fbcc 	bl	8003284 <_free_r>
 8003aec:	4625      	mov	r5, r4
 8003aee:	4628      	mov	r0, r5
 8003af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af4:	f000 f81b 	bl	8003b2e <_malloc_usable_size_r>
 8003af8:	4284      	cmp	r4, r0
 8003afa:	4607      	mov	r7, r0
 8003afc:	d802      	bhi.n	8003b04 <_realloc_r+0x34>
 8003afe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b02:	d812      	bhi.n	8003b2a <_realloc_r+0x5a>
 8003b04:	4621      	mov	r1, r4
 8003b06:	4640      	mov	r0, r8
 8003b08:	f7ff fc24 	bl	8003354 <_malloc_r>
 8003b0c:	4605      	mov	r5, r0
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d0ed      	beq.n	8003aee <_realloc_r+0x1e>
 8003b12:	42bc      	cmp	r4, r7
 8003b14:	4622      	mov	r2, r4
 8003b16:	4631      	mov	r1, r6
 8003b18:	bf28      	it	cs
 8003b1a:	463a      	movcs	r2, r7
 8003b1c:	f7ff ffca 	bl	8003ab4 <memcpy>
 8003b20:	4631      	mov	r1, r6
 8003b22:	4640      	mov	r0, r8
 8003b24:	f7ff fbae 	bl	8003284 <_free_r>
 8003b28:	e7e1      	b.n	8003aee <_realloc_r+0x1e>
 8003b2a:	4635      	mov	r5, r6
 8003b2c:	e7df      	b.n	8003aee <_realloc_r+0x1e>

08003b2e <_malloc_usable_size_r>:
 8003b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b32:	1f18      	subs	r0, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bfbc      	itt	lt
 8003b38:	580b      	ldrlt	r3, [r1, r0]
 8003b3a:	18c0      	addlt	r0, r0, r3
 8003b3c:	4770      	bx	lr
	...

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
